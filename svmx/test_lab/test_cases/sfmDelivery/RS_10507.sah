var $rs_10507 = _testcase("RS_10507","Verify Error type on Child when simple expressions is configured - Source to Target Save");
$rs_10507.start();
var $sfmNameToBeCloned = "Create Usage Lines from Estimates";
var $sfmName = $bo_act_common.generateRandomName("RS_10507_");
var $isCustom = false;
var $sfmTemplate = "SVMXSTD: Create Usage from Estimates";
var $sfmTemplateSaveAsName = $sfmName;
var $containerName = ["Parts","Expenses","Travel"];
var $fieldName=["Activity Type","Activity Type","Activity Type"];
var $targetObject ="Work Detail (Work Order)";
var $rulename =$sfmName;
var $ruleDescription ="Activity Type should not be Cleanup";

var $fieldArray = ["Activity Type"];
var $conditionArray = ["Equals"];
var $operandArray =["Value"];
var $valueArray =["Cleanup"];
var $advExpr= "";
var $messageType = "Error";
var $wizardObject ="Work Order";

//Create WO through REST API
var $woNumber = $sfm_act_createCustomWizard.createBlankWoFromRest($sfmlUsn, $sfmlPwd, $sfmClientId, $sfmConsumerSecret, $sfmOrgInstance);

_setSpeed($g_stepSpeed);
$bo_act_login.login($g_url,$sfmlUsn,$sfmlPwd);



//clone Source to Target Child Process
$sfm_act_SFM.cloneTDM016($sfmNameToBeCloned,$sfmName,$isCustom, $sfmTemplateSaveAsName,$sfmTemplate,$fieldName, $containerName);
$sfm_act_SFM.partsNotMandatory();
$sfm_act_SFM.partsMultiAdd("--None--");

//create Data validation rule
$sfm_pg_dvr.newRule($targetObject, $rulename, $ruleDescription, $fieldArray, $conditionArray, $operandArray, $valueArray, $advExpr, $messageType);
_click($sfm_pg_sfmDesigner.btn_quickSaveSFM);
_click($sfm_pg_sfmDesigner.btn_saveSFM);

//add the process to wizard
$sfm_act_wizards.addToWizard($wizardObject, $wizardName[0], $wizardType[1], $sfmName);
_wait(3000,_isVisible($sfm_pg_sfmDesigner.lnk_home)); 

//Navigate to the WO for validation
$bo_act_navigation.navigateToCreatedRecordUsingGlobalSearch($woNumber);
$sfm_act_createCustomWizard.clickWizardBtn($sfmName);

//Add a row to all child lines

//add line to Parts
$sfm_act_sfmDesigner.addChildLine("Parts");
_setValue($sfm_pg_sfmDesigner.txt_eeLineQty,"5");
_click($sfm_pg_sfmDesigner.txt_eeActivityType); 
_click(_listItem("Cleanup"));
_click($sfm_pg_sfmDesigner.btn_eeUpdate);
_wait(3000);

//Validate that the DVR is triggering or not
_click($sfm_pg_sfmDesigner.btn_deliverySave);

	if(_isVisible(_div("/"+"Parts: "+$ruleDescription+"/"))){
		_log("Pass ::: DVR Error for child line is working","SUCCESS");
	}else{
		_log("Fail ::: DVR Confirmation for child line is not working","FAILURE");
	}
	
		_click($sfm_pg_sfmDesigner.btn_deliveryPartsTab);
		$sfm_act_sfmDesigner.navToExtendedEdit();
		_click($sfm_pg_sfmDesigner.txt_eeActivityType); 
		_click(_listItem("Calibration"));
		_click($sfm_pg_sfmDesigner.btn_eeUpdate);
		_wait(3000);		
	_click($sfm_pg_sfmDesigner.btn_deliverySave);
	if(_isVisible(_div("/"+"Parts: "+$ruleDescription+"/"))){
		_log("Fail ::: DVR Confirmation for child line is not working","FAILURE");
	}else{
		_log("Pass ::: DVR Error for child line is working","SUCCESS");
	}
if(_exists($sfm_pg_sfmDesigner.txt_priceAlert)){
	_click($sfm_pg_sfmDesigner.btn_priceAlertOk);
	_wait(10000);
}

$rs_10507.end();