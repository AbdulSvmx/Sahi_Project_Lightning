/*

//Please make sure below webservices is added in apex class with version 28 before running this testcase
 //If you are running in base org please change SVMXDEV with SVMXC
global class objWebService{



global objWebService(){}
    
    webservice static SVMXDEV.SFM_WrapperDef.SFM_PageData onLoad(SVMXDEV.SFM_WrapperDef.SFM_TargetRecord sfmtargetrec){
        SVMXDEV.SFM_ServicesDef serdev = new SVMXDEV.SFM_ServicesDef();
        map<String,List<Sobject>> detailSobjectMap = new map<String,List<Sobject>>();
        map<String,Schema.SObjectType> Allobj = new map<String,Schema.SObjectType>();   
        Schema.sObjectType site1 = SVMXDEV__Service_Order__c.sObjectType;       
        Allobj.put('SVMXDEV__Service_Order__c',site1);         
        Sobject Header = serdev.SFM_Page_GetHeaderRecord(sfmtargetrec,Allobj);
            
        SVMXDEV__Service_Order__c obj = (SVMXDEV__Service_Order__c) Header ;
           
            obj.SVMXDEV__Driving_Time__c = 120;
            obj.SVMXDEV__Order_Type__c = 'Depot Repair';
            obj.SVMXDEV__Zip__c = '560066';
            obj.SVMXDEV__Is_Entitlement_Performed__c = true;
            
        
        return serdev.SFM_Page_BuildResponse(sfmtargetrec,Header,detailSobjectMap);
    }
    webservice static SVMXDEV.SFM_WrapperDef.SFM_PageData beforeSaveOrUpdate(SVMXDEV.SFM_WrapperDef.SFM_TargetRecord sfmtargetrec){
        SVMXDEV.SFM_ServicesDef serdev = new SVMXDEV.SFM_ServicesDef();
        map<String,List<Sobject>> detailSobjectMap = new map<String,List<Sobject>>();
        map<String,Schema.SObjectType> Allobj = new map<String,Schema.SObjectType>();   
        Schema.sObjectType site1 = SVMXDEV__Service_Order__c.sObjectType;       
        Allobj.put('SVMXDEV__Service_Order__c',site1);         
        Sobject Header = serdev.SFM_Page_GetHeaderRecord(sfmtargetrec,Allobj);
            
        SVMXDEV__Service_Order__c obj = (SVMXDEV__Service_Order__c) Header ;
       
       
            obj.SVMXDEV__Driving_Time__c = 60;
            obj.SVMXDEV__Order_Type__c = 'Field Service';
            obj.SVMXDEV__Zip__c = '560065';
            obj.SVMXDEV__Is_Entitlement_Performed__c = false;
            
        
        return serdev.SFM_Page_BuildResponse(sfmtargetrec,Header,detailSobjectMap);
    }
    webservice static SVMXDEV.SFM_WrapperDef.SFM_PageData afterSaveOrUpdate(SVMXDEV.SFM_WrapperDef.SFM_TargetRecord sfmtargetrec){
        SVMXDEV.SFM_ServicesDef serdev = new SVMXDEV.SFM_ServicesDef();
        map<String,List<Sobject>> detailSobjectMap = new map<String,List<Sobject>>();
        map<String,Schema.SObjectType> Allobj = new map<String,Schema.SObjectType>();   
        Schema.sObjectType site1 = SVMXDEV__Service_Order__c.sObjectType;       
        Allobj.put('SVMXDEV__Service_Order__c',site1);         
        Sobject Header = serdev.SFM_Page_GetHeaderRecord(sfmtargetrec,Allobj);
            
        SVMXDEV__Service_Order__c obj = (SVMXDEV__Service_Order__c) Header ;
       
       string[] Addresses = new string[]{'shashikala.kamath@servicemax.com'};
       Messaging.SingleEmailMessage QuoteMail = new Messaging.SingleEmailMessage ();
       QuoteMail.setSaveAsActivity(true);
       QuoteMail.setToAddresses(Addresses);
       QuoteMail.setReplyTo('shashikala.kamath@servicemax.com');  
       QuoteMail.setSenderDisplayName('QA');
       QuoteMail.setSubject('Web Service testing After Save');
       QuoteMail.setPlainTextBody('Web Service testing After Save');
       Messaging.sendEmail(new Messaging.SingleEmailMessage[] {QuoteMail});
        
        return serdev.SFM_Page_BuildResponse(sfmtargetrec,Header,detailSobjectMap);
    }
    
    webservice static SVMXDEV.SFM_WrapperDef.SFM_PageData onChange(SVMXDEV.SFM_WrapperDef.SFM_TargetRecord sfmtargetrec){
        SVMXDEV.SFM_ServicesDef serdev = new SVMXDEV.SFM_ServicesDef();
        map<String,List<Sobject>> detailSobjectMap = new map<String,List<Sobject>>();
        map<String,Schema.SObjectType> Allobj = new map<String,Schema.SObjectType>();   
        Schema.sObjectType site1 = SVMXDEV__Service_Order__c.sObjectType;       
        Allobj.put('SVMXDEV__Service_Order__c',site1);         
        Sobject Header = serdev.SFM_Page_GetHeaderRecord(sfmtargetrec,Allobj);
            
        SVMXDEV__Service_Order__c obj = (SVMXDEV__Service_Order__c) Header ;
       
       
            obj.SVMXDEV__Driving_Time__c = 30;
            obj.SVMXDEV__Order_Type__c = 'Depot Repair';
            obj.SVMXDEV__Zip__c = '560064';
            obj.SVMXDEV__Is_Entitlement_Performed__c = true;
            
        
        return serdev.SFM_Page_BuildResponse(sfmtargetrec,Header,detailSobjectMap);
    }
    
    webservice static SVMXDEV.SFM_WrapperDef.SFM_PageData onExit(SVMXDEV.SFM_WrapperDef.SFM_TargetRecord sfmtargetrec){
        SVMXDEV.SFM_ServicesDef serdev = new SVMXDEV.SFM_ServicesDef();
        map<String,List<Sobject>> detailSobjectMap = new map<String,List<Sobject>>();
        map<String,Schema.SObjectType> Allobj = new map<String,Schema.SObjectType>();   
        Schema.sObjectType site1 = SVMXDEV__Service_Order__c.sObjectType;       
        Allobj.put('SVMXDEV__Service_Order__c',site1);         
        Sobject Header = serdev.SFM_Page_GetHeaderRecord(sfmtargetrec,Allobj);
            
        SVMXDEV__Service_Order__c obj = (SVMXDEV__Service_Order__c) Header ;
       
       
            obj.SVMXDEV__Driving_Time__c = 15;
            obj.SVMXDEV__Order_Type__c = 'Depot Repair';
            obj.SVMXDEV__Zip__c = '560063';
            obj.SVMXDEV__Is_Entitlement_Performed__c = false;
            
        
        return serdev.SFM_Page_BuildResponse(sfmtargetrec,Header,detailSobjectMap);
    }    
}
 
 */


//Author:Mamata RS-4998
	var $RS_4998 = _testcase("RS_4998", "Verify Web Service call On Change");
	$RS_4998.start();
	_setSpeed($g_stepSpeed);

	var $sfmToBeCloned="Create Usage Lines from Estimates";
	var $sfmName=$bo_act_common.generateRandomName("4998SFM");
	//change  the name of $sfmTemplateSaveAsName before execution to avoid any duplication.
	var $sfmTemplateSaveAsName=$bo_act_common.generateRandomName("4998Temp");

	var $objName="Work Order";
	var $wizardname="SFM Delivery Auto";
	var $wizardID= $wizardname;
	var $executionMode="Interactive";
	var $fieldActnType="SFM";
	var $actnName=$sfmName;
	var $stndSFMName=$sfmName;

	var $subTypeWO="Order Status";
	var $subTypePart="Date Received";
	var $subTypeActivityType="Activity Type";
	var $subTypeExpenses="Billable Qty";
	var $subTypeTravel="Consumed From Location";
	var $d_url="https://test.salesforce.com/";
	var $d_unBase="noor.sharieff@Tools2.com";
	var $d_pwdBase="welcome-03";
	var $wizardButtonName=$sfmName;
	var $enteredMinOC=30;
	var $enteredOTOC="Depot Repair";
	var $enteredZipOC=560064;
	var $onChangeValue="Field Service";

		
	$bo_act_login.login($g_url, $sfmUsn, $sfmPwd);
	$sfm_act_lightningConfig.switchToLightning();
	$bo_act_navigation.navigateServicemaxSetUpInLightening();

//*****Navigate to SFm Designer and create clone of Manage WO Line Usage Services transaction********
$bo_act_navigation.navigateToSfmTransactionDesignerForWeb();
_wait(20000);
$bo_act_WebServices.createSFmForWebServices($sfmToBeCloned, $sfmName,$subTypePart,$subTypeActivityType,$subTypeExpenses,$subTypeTravel,$sfmTemplateSaveAsName);
$bo_act_WebServices.enableOnChange();

$bo_act_WebServices.saveAndClose();
_click($bo_pg_home.link_backToSetUpHome);
//*******Navigate to SFM Wizard and Create Wizard and Add Above Transaction to it**********
//$bo_act_navigation.navigateToSfmWizard();
$sfm_act_wizards.addToWizard($objName, $wizardname, $fieldActnType, $actnName);
//$bo_act_SFW.createWizardGeneralInfo($objName,$wizardname,$wizardID);
//$bo_act_SFW.createWizardStep($fieldActnType,$actnName,$executionMode);

//******Launch the SFM in delivery for WO object**************

$bo_act_sfmVerifyWorkOrder.verifyWizardOnWOObj($stndSFMName);
$bo_act_sfmVerifyWorkOrder.clkOnWizard($wizardButtonName);
_wait(30000);
$bo_act_WebServices.verifyOnChange($enteredMinOC,$enteredOTOC,$enteredZipOC,$onChangeValue);
//********Deleting test Data***************
/*
$bo_act_navigation.navigateServicemaxSetUpInLightening();
$bo_act_SFW.deleteWizards($objName,$wizardID);

*/
//_wait(6000);
//$bo_act_navigation.navigateServicemaxSetUpInLightening();
//$bo_act_navigation.navigateToSfmTransactionDesignerForWeb();
//$bo_act_SFM.deleteSFM($sfmName);

_setSpeed($g_stepSpeed);
$RS_4998.end();