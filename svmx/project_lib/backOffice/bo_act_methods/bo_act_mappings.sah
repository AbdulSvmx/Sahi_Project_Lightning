//Functions related to Back Office Mappings.

var $bo_act_mappings = new function bo_act_mappings() {
	
	//This function creates a new mapping and saves the map with the given name.
	//This is designed to work in Classic and Lightning
	//The user should be in the 'QC and Mapping' tab before calling this function
	
	this.createMapping = function($pickListLabels,$pickListValues,$textLabels,$textValues,$mapName){
		var $i = 0;
		_selectDomain($domainName);
		_wait(6000);
		_click($sfm_pg_sfmMapping.btn_mappingTab);
		_click($sfm_pg_sfmMapping.btn_newMappingExistingRecord);
		_wait(6000);
		if($pickListLabels.length > 0) {
		//First setting the picklist values
		for($i=0;$i<$pickListLabels.length;$i++){
			_click(_f("main").s_togglebutton("I want to choose a field from the list").rightOf(_f("main").ftedatagriditemrenderer($pickListLabels[$i])));
			_setSelected(_f("main").s_combobox("valuesCombo").rightOf(_f("main").ftedatagriditemrenderer($pickListLabels[$i])),$pickListValues[$i]);
		}
		_setValue($sfm_pg_sfmMapping.txt_mappingName,$mapName);
		_setValue($sfm_pg_sfmMapping.txt_mappingId,$mapName);
		_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
		if(_isVisible(_f("main").button("OK"))){
			_click(_f("main").button("OK"));
		}
		_setSelected($sfm_pg_sfmMapping.btn_selectExistingMap,$mapName);
		}
		//Set all the text values
		$i = 0;
		_click($sfm_pg_sfmMapping.btn_toggleMapOnOff);
		if($textLabels.length > 0){
		for($i=0;$i<$textLabels.length;$i++){
			_setValue(_f("main").s_textinput("textip").rightOf(_f("main").ftedatagriditemrenderer($textLabels[$i])),$textValues[$i]);
		}
		if($pickListLabels.length > 0){
		  _click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
		}
		else {
			_setValue($sfm_pg_sfmMapping.txt_mappingName,$mapName);
			_setValue($sfm_pg_sfmMapping.txt_mappingId,$mapName);
			_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
		}
		_setSelected($sfm_pg_sfmMapping.btn_selectExistingMap,$mapName);
		}
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
		_selectDomain();
		
	};
	
	this.editExistingFieldsInMapping = function($pickListLabels,$pickListValues,$textLabels,$textValues,$mapName){
		//This function edits an existing mapping and saves the map with the same name.
		//This is designed to work in Classic and Lightning
		//The user should be in the 'QC and Mapping' tab before calling this function
		//Added by JJ
		 var $i = 0;
		_click($sfm_pg_sfmMapping.btn_mappingTab);
		_setSelected($sfm_pg_sfmMapping.btn_selectExistingMap,$mapName);
		if($pickListLabels.length > 0){
			for($i=0;$i<$pickListLabels.length;$i++){
				_setSelected(_f("main").s_combobox("valuesCombo").rightOf(_f("main").ftedatagriditemrenderer($pickListLabels[$i])),$pickListValues[$i]);
				_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
				_wait(2000);
				_assertVisible($sfm_pg_sfmMapping.label_mapSavedMsg);
			}
		}
		if($textLabels.length > 0){
			for($i=0;$i<$textLabels.length;$i++){
				_setValue(_f("main").s_textinput("textip").rightOf(_f("main").ftedatagriditemrenderer($textLabels[$i])),$textValues[$i]);
			}
			_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
			_wait(2000);
			_assertVisible($sfm_pg_sfmMapping.label_mapSavedMsg);
		}
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
	};
	
	this.addFieldsToExistingMapping = function($pickListLabels,$pickListValues,$textLabels,$textValues,$mapName){
		//This function adds new fields to existing mapping and saves the map with the same name.
		//This is designed to work in Classic and Lightning
		//The user should be in the 'QC and Mapping' tab before calling this function
		//Added by JJ
		var $i = 0;
		_selectDomain($domainName);	
		_setSelected(_f("main").s_combobox("searchCombo").inside(_f("main").s_navigatorcontent("Value Map for Existing Records")),$mapName);
		_click($sfm_pg_sfmMapping.btn_toggleMapOnOff);
		if($pickListLabels.length > 0){
					for($i=0;$i<$pickListLabels.length;$i++){
						_click(_f("main").s_togglebutton("I want to choose a field from the list").rightOf(_f("main").ftedatagriditemrenderer($pickListLabels[$i])));
						_setSelected(_f("main").s_combobox("valuesCombo").rightOf(_f("main").ftedatagriditemrenderer($pickListLabels[$i])),$pickListValues[$i]);
						_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
						_wait(2000);
						_assertVisible($sfm_pg_sfmMapping.label_mapSavedMsg);
					}
				}
				if($textLabels.length > 0){
					for($i=0;$i<$textLabels.length;$i++){
						_setValue(_f("main").s_textinput("textip").rightOf(_f("main").ftedatagriditemrenderer($textLabels[$i])),$textValues[$i]);
					}
					_click($sfm_pg_sfmMapping.btn_saveMappingExistingRecord);
					_wait(2000);
					_assertVisible($sfm_pg_sfmMapping.label_mapSavedMsg);
				}
		_setStrictVisibilityCheck(true);
		_click($sfm_pg_sfmMapping.btn_toggleMapOnOff);
		_setStrictVisibilityCheck(false);
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
	};
	
	this.deleteExistingMapping = function($mapName,$sourceObject,$targetObject){
		//This function deletes an existing mapping if it exists
		//Select Source object for field maps and make it "--None--" for value maps.
		//Note: The mapping used here should not be used in any SFM process.
		//This function takes care of logging the process id in which the mapping is used (If applicable)
		//Added by JJ
		$bo_act_navigation.navigatetoSFMMaps();
		_selectDomain($domainName);
		_setSelected($sfm_pg_sfmMapping.cmb_mappingComboBox,$mapName);
		_wait(5000);
		var $temp = _getValue($sfm_pg_sfmMapping.txt_mappingName);
		if($temp === "Use an existing map") {
			_log("Mapping $mapName does not exist...Aborting");
			return 0;	
		}
		_click($sfm_pg_sfmMapping.btn_deleteMappingOutsideProcess);
		_setStrictVisibilityCheck(true);
		_click($sfm_pg_sfmMapping.btn_yesButtonDeleteOutsideProcess);
			 if(_isVisible($sfm_pg_sfmMapping.txt_mappingUsedWarning)) {
				var $errMsg = _getValue($sfm_pg_sfmMapping.txt_mappingUsedWarning);
				_log("FAIL: Cannot delete expression. Following is the error message: $errMsg");
				_click($sfm_pg_sfmMapping.btn_okButtonAfterWarning);
			   return 0;
			}
			_setStrictVisibilityCheck(false);
			_assertVisible($sfm_pg_sfmMapping.label_mapDeleted);
	};
};