/**
 * Function to perform actions on list view
 */


var $sfmrdz_act_common= new function sfmrdz_act_common(){
	
	/**
	 * Function to launch the list views
	 * change wait based on $viewName
	 */
	this.LaunchListViewWindow= function($viewName){
		_set($currentHomePageULR, window.location.href);
		_log($currentHomePageULR);
		var $orgId=$currentHomePageULR.substring(8,12);
		//_log($orgId);
		var $ListViewWindow="https://svmxdev."+$orgId+".visual.force.com/apex/SFM_Designer#/"+$viewName+"-list";
		_log($ListViewWindow);
		_navigateTo($ListViewWindow);
		_wait(15000,_isVisible($sfmrdz_pg_common.btn_actionMenu));
		return $currentHomePageULR;
	};
	
	/**
	 * Function to launch the home viw
	 */
	
	this.launchHomeWindow=function($homeURL){
		//var $currentListURL=null;
		//_set($currentListURL, window.location.href);
		//var $orgId=$currentListURL.subString(16,20);
		//_log($orgId);
		//var $homeURL="https://"+$orgId+".lightning.force.com/lightning/page/home";
		//_log($homeURL);
		_navigateTo($homeURL);
		_wait(10000,_isVisible($bo_pg_home.circular_image));
	};
	
	/**
	 * Function to search Object
	 * 
	 */
	this.searchObj=function($objName){
		_setValue($sfmrdz_pg_common.txt_listFilter,$objName);
		_keyPress($sfmrdz_pg_common.txt_listFilter, 13);
		_wait(10000,_isVisible($sfmrdz_pg_common.btn_actionMenu));
		return $callBack.returnResult(!_exists($sfmrdz_pg_common.btn_msgNoResult), "\" "+$objName+" \" "+"Search");
		
	};
	
		

	/**
	 * Function to select Picklist/Filter
	 * 
	 */
	this.typePicklist=function($Type){
		_click($sfmrdz_pg_common.txt_listViewPicklist);
		_wait(5000,_isVisible(_link($Type)));
		_click(_link($Type));
		_wait(10000,_isVisible($sfmrdz_pg_common.btn_actionMenu));
	};
	
	/**
	 * Sorting on list View
	 * 
	*/
	this.colSort=function($colName,$order){
		//Collection All element under mentioned column
		var $list=null;
			if ($colName=="TRANSACTION NAME" || $colName=="DATA VALIDATION RULES NAME" || $colName=="Expression Name") {
				_log("Under if loop: ");
				$list = _collect("_link","/.*/",_under(_div($colName)));
			}else if ($colName=="Source Object" || $colName=="TODO_TARGET_OBJECT" || $colName=="Object") {
				_log("Under else loop: ");
				$list = _collect("_span","/.*/",_under(_div($colName)));
			}			
		
		//new array declaration
		var $listName=new Array($list.length);
		
		//fetching element text to array
		for (var $i = 0; $i < $list.length; $i++) {
			$listName[$i]=_getText($list[$i]);
		}	
		

		// filtering array to remove space
		$listName=$listName.filter(Boolean);
		
		//Generating Original copy
		var $orgList=new Array($listName.length);
		for(var $i=0;$i<$listName.length;$i++){
			$orgList[$i]=$listName[$i];
		}
		
		//Sorting based on Ascending or descending
		var $linkListAscSorted=$listName.sort();
		var $linkListSorted=null;
		if($order=="ascending"){
			$linkListSorted=$linkListAscSorted;
		}else {
			$linkListSorted=$linkListAscSorted.reverse();
		}

		
		var $retVal=false;
		for(var $i=0;$i<$linkListSorted.length;$i++){	
			if($orgList[$i]==$linkListSorted[$i]){;
				$retVal=true;
			}else{
				_log("Actual object is: "+$orgList[$i]);
				_log("Expected object is: "+$linkListSorted[$i]);
				$retVal=false;
				break;
			}	
		}
		//_assertTrue($retVal, "Links on "+$colName+" column are not sorted in order");
		return $retVal;
	};
	
	/**
	 * Search and click the action menu for mentioned object
	 */
	this.clickActionMenu=function($objName){
		$sfmrdz_act_common.searchObj($objName);
		$trnVal=_assertVisible(_link($objName));
		if($trnVal==true){
			_click(_button("/Button Dropdown/",_near(_link($objName))));
		}else{
			_log($objName+" - Object not found.");
			_assertTrue($trnVal,$trnName+" - not found.");
		}
		_wait(5000,_isVisible($sfmrdz_pg_common.link_clone));
	};
	
	/**
	 * Mouse Hover on column item in given row
	 */
	this.mouseOver=function($row,$column,$Type){
		var $element=null;
		if ($column=="Last Edited") {
			$element=_div("/Text slds-text-body.*/",_near(_link($row)));
		}else if ($column=="Status") {
			var $statusDiv=_div("/rt-td DataTableCell--align-center/",_near(_link($row)),_under(_parentNode(_div($column),"DIV",1)));
			$element=_svg_icon("/slds-icon-text/",_in($statusDiv));
		}else if ($column=="Lock") {
			$element=_svg_icon("/slds-icon-text/",_near(_link($row)));
		}else if ($column=="Type") {
			var $typeDiv=_div("/rt-td DataTableCell--align-center/",_near(_link($row)));
			if ($Type=="To create Source to Target records") {
				$element=_svg_icon("/timesheet/",_in($typeDiv));
			}else if ($Type=="To create and map child lines only") {
				$element=_svg_icon("/timesheet-entry/",_in($typeDiv));
			}else if ($Type=="To create and manage child lines") {
				$element=_svg_icon("/timeslot/",_in($typeDiv));
			}
		}
		_mouseOver($element);
		_wait(1000,_isVisible($sfmrdz_pg_common.btn_lastEditMouseOverDiv));
		return $callBack.returnResult(_exists($sfmrdz_pg_common.btn_lastEditMouseOverDiv), " mouse hover div on "+$column+" column for "+$row+" row not exists");
		
	};
	
	//Secondary sort fn
	this.secondarySort=function(){
	
		var $whereUsedList=_collect("_svg_icon","/.*/",_under(_div("Where Used")));
		_log("total no of where used objects: "+$whereUsedList.length);
		var $linkNames=new Array($whereUsedList.length);

		//extracting link text
		for(var $i=0;$i<$whereUsedList.length;$i++){
			$linkNames[$i]=_getText(_link("/.*/",_near($whereUsedList[$i])));
		}
		_log("linkName count: "+$linkNames.length);
		
		//creating Original array copy
		var $orgList=new Array();
		for(var $i=0;$i<$linkNames.length;$i++){
			$orgList[$i]=$linkNames[$i];
		}
		
		//sorting link name array
		$linkNames=$linkNames.sort();
		$retVal=false;
		
		for(var $i=0;$i<$linkNames.length;$i++){
			if($linkNames[$i]==$orgList[$i]){
				$retVal=true;
			}else{
				$retVal=false;
				_log("element visible on secondary sort col is : "+$orgList[$i]);
				_log("element expected on secondary sort col is : "+$linkNames[$i]);
				break;
			}
		}
		return $callBack.returnResult($retVal);

	};
	
};