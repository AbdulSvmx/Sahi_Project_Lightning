/**
 * Cloning TDM016/Manage Work Order Lines - Usage process and adding fields to screen
 */

var $sfm_act_SFM = new function sfm_act_SFM() {

	this.cloneTDM016 = function($sfmNameToBeCloned, $sfmName, $isCustom,
			 $sfmTemplateSaveAsName,$sfmTemplate, $fieldName, $containerName) {
		$bo_act_navigation.navigateToSfmTransactionDesigner();
//		_setSpeed($g_stepSpeed);
		_wait(10000);
		$sfm_act_SFM.selectSFM($sfmNameToBeCloned, $isCustom);

		_click($bo_pg_sfmTransactionAndDesigner.btn_clone);
		_wait(50000, _isVisible($bo_pg_sfmTransactionAndDesigner.txt_name));
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, "");
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, $sfmName);
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId, "");
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId, $sfmName);
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, "");
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, $sfmName);
		_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
		_wait(5000);
		_setSelected($bo_pg_sfmTransactionAndDesigner.sel_sfmTemplate,
				$sfmTemplate);
		_wait(10000);
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAs,
				$sfmTemplateSaveAsName);
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAsId,
				$sfmTemplateSaveAsName);
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave);
		_wait(10000);
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
		_wait(10000);
		if($fieldName.length > 0){
			$sfm_act_SFM.addFieldToScreen($fieldName, $containerName);
		}
	};

	
		this.dvrScenario5 = function($sfmNameToBeCloned, $sfmName, $isCustom,
			 $sfmTemplateSaveAsName,$sfmTemplate, $fieldName, $containerName,$bProcessStatus) 
			 {
		$bo_act_navigation.navigateToSfmTransactionDesigner();
		_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
		_setValue($bo_pg_sfmTransactionAndDesigner.lbl_searchSFM, $sfmName);
		_wait(10000);
		
		_setStrictVisibilityCheck(false);
		_setStrictVisibilityCheck(true);
//		
		
		if (_isVisible(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process exists successfully");
			$bProcessStatus = false;
			//_click(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10));
			
		} else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process does  exists ");
			$bProcessStatus = false;
			
			} else{
				_log("Process does not exists ");
				$bProcessStatus = true;
				$bo_act_navigation.navigateToSfmTransactionDesigner();
//				_setSpeed($g_stepSpeed);
				_wait(10000);
					 
				_setSpeed(3000);
				
				//$sfm_act_SFM.selectSFM($sfmNameToBeCloned, $isCustom);

				_setValue($bo_pg_sfmTransactionAndDesigner.txt_standardSfmTransactionQuickFind,
						$sfmNameToBeCloned);
				_setStrictVisibilityCheck(false);
				_setStrictVisibilityCheck(true);
//				
				 
				if (_isVisible(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10))) {
					_wait(3000);
					_click(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10));

				} else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10))) {
					_wait(3000);
					_click(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10));

				} else {
					_click(_f("main").s_checkbox("/CheckBox/").leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10));
				}
				 _setStrictVisibilityCheck(false);

				
				_click($bo_pg_sfmTransactionAndDesigner.btn_clone);
				_wait(50000, _isVisible($bo_pg_sfmTransactionAndDesigner.txt_name));
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, "");
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, $sfmName);
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId, "");
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId, $sfmName);
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, "");
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, $sfmName);
				_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
				_wait(5000);
				_setSelected($bo_pg_sfmTransactionAndDesigner.sel_sfmTemplate,
						$sfmTemplate);
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAs,
						$sfmTemplateSaveAsName);
				_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAsId,
						$sfmTemplateSaveAsName);
				_wait(5000);
			
		//$sfm_act_SFM.addFieldToScreen($fieldName, $containerName);
		//$sfm_act_SFM.partsNotMandatory();
		//$sfm_act_SFM.partsMultiAdd("--None--");

		//create Data validation rule
		 }
		 	
		
		_setStrictVisibilityCheck(false);
		
		return $bProcessStatus;
	};
	
	**
	 * Author		:	Lakshmi BS
	 * Function		:	To search and check custom process
	 * Parameters	:	$sfmName: Process name
	 * Examples		:	Refer RS_10543.sah
	 */
	
	this.sfmProcessCheck = function($sfmName,$bProcessStatus) 
			 {
		$bo_act_navigation.navigateToSfmTransactionDesigner();
		_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
		_setValue($bo_pg_sfmTransactionAndDesigner.lbl_searchSFM, $sfmName);
		_wait(10000);
		
		_setStrictVisibilityCheck(false);
		_setStrictVisibilityCheck(true);
		
		
		if (_isVisible(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process exists successfully");
			$bProcessStatus = true;
			//_click(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmNameToBeCloned), 10, 10));
			
		} else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process does  exists ");
			$bProcessStatus = true;
			
		}
		else{
				_log("Process does not exists ");
				$bProcessStatus = false;
		 }
		 	
		
		_setStrictVisibilityCheck(false);
		
		return $bProcessStatus;
	};
	/**
	 * Author		:	Anand Kakhandaki
	 * Function		:	To edit custom process
	 * Parameters	:	$sfmName: Process name
	 * Examples		:	Refer RS_10499.sah
	 */
	this.editCustomProcess=function($sfmName){
		$bo_act_navigation.navigateToSfmTransactionDesigner();
		_wait(20000,_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions));
		_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
		_setValue($bo_pg_sfmTransactionAndDesigner.lbl_searchSFM, $sfmName);
		_wait(10000);
		_click(_f("main").s_label($sfmName).near(_f("main").processlistitemrenderer($sfmName)));
		_wait(20000,_isVisible($sfm_pg_screenDesigner.btn_propoties));
	};
	
	
	this.checkCustomProcess=function($sfmName){
		var $retVal=null;
		$bo_act_navigation.navigateToSfmTransactionDesigner();
		_wait(20000,_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions));
		_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
		_setValue($bo_pg_sfmTransactionAndDesigner.lbl_searchSFM, $sfmName);
		
		_wait(10000);
		if (_isVisible(_f("main").s_label($sfmName).near(_f("main").processlistitemrenderer($sfmName)))) {
			$retVal=true;
		}else {
			$retVal=false;
		}
		return $retVal;
	};
	
	/**
	 * Based on the number of items passed in array(ContainerName), fields gets added to either header or child
	 * If Container is Order Status then field is added to header otherwise to Child lines
	 */
	this.addFieldToScreen = function($fieldName, $containerName) {
		for (var $i = 0; $i < $fieldName.length; $i++) {
			if ($containerName[$i] == 'Order Status') {
				//$bo_pg_sfmTransactionAndDesigner.addField($fieldName[$i],$containerName[$i]);
				_click(_f("main").fieldrenderer("[object Object]").near(_f("main").formitemlabel($containerName[$i])));
			} else if($containerName[$i] == 'Parts' || $containerName[$i] == 'Labor' || $containerName[$i] == 'Expenses' || $containerName[$i] == 'Travel'  ){
				if(_isVisible(_f("main").s_hscrollbar("horizontalScrollBar").near(_f("main").s_richtext($containerName[$i])))){
					_setValue(_f("main").s_hscrollbar("horizontalScrollBar").near(_f("main").s_richtext($containerName[$i])),"00");
				    }
					_click(_f("main").s_datagroup("dataGroup").near(_f("main").s_richtext($containerName[$i])));
				}
			else{
				_click(_f("main").s_datagroup("dataGroup").near(_f("main").s_richtext($containerName[$i])));				
				}
			//Below logic is used for selecting object from multi match list	
			_setValue($bo_pg_sfmTransactionAndDesigner.txt_quickFindField, $fieldName[$i]);
			var $elementName=$fieldName[$i];
				var $find=true;
				var $k=0;
				var $element=null;
				while ($find) {
//					_log("search element name: "+$elementName);
					if ($k==0) {
						$element=_getValue(_f("main").s_label($elementName).near(_f("main").s_textinput($elementName)));
					}else{
						$element=_getValue(_f("main").s_label("/"+$elementName+"/["+$k+"]").near(_f("main").s_textinput($elementName)));
					}
//					_log("$element: "+$element);
					if ($elementName===$element) {
						$find=false;
						_click(_f("main").s_label($k).near(_f("main").s_textinput($elementName)));
					}else {
						$k++;
					}
				}
				_click(_f("main").s_button("/Add Field/"));
		}
		_click($bo_pg_sfmTransactionAndDesigner.btn_pageLayoutSave);
		_wait(3000, _isVisible($bo_pg_sfmTransactionAndDesigner.lbl_pageLayoutSaved));
		_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
	};
	
	

		

	
	this.selectSFM = function($sfmName, $isCustom) {
		if ($isCustom) {
			_setStrictVisibilityCheck(true);
			_wait(15000,_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions));
			_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
			_setValue(
					$bo_pg_sfmTransactionAndDesigner.txt_yourCustomSfmTransactionsQuickFind,
					$sfmName);

		} else {
			_wait(15000,_isVisible($bo_pg_sfmTransactionAndDesigner.txt_standardSfmTransactionQuickFind));
			_setValue($bo_pg_sfmTransactionAndDesigner.txt_standardSfmTransactionQuickFind,
					$sfmName);
		}
		_setStrictVisibilityCheck(false);
//		_setStrictVisibilityCheck(true);
//		_click(_f("main").s_checkbox("/CheckBox/").leftOf(_f("main").processlistitemrenderer($sfmName)),10,10);
//		_setStrictVisibilityCheck(false);
		_setStrictVisibilityCheck(true);
//		if (_isVisible(_f("main").s_checkbox(0).leftOf(_f("main").s_label($sfmName),10,10))) {
//			_wait(3000);
//			_click(_f("main").s_checkbox(0).leftOf(_f("main").s_label($sfmName), 10, 10));
//
//		} 
//		
//		else {
//			_setValue(
//					$bo_pg_sfmTransactionAndDesigner.txt_standardSfmTransactionQuickFind,
//					$sfmName);
//		}
		 
		if (_isVisible(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_wait(3000);
			_click(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmName), 10, 10));

		} else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_wait(3000);
			_click(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName), 10, 10));

		} else {
			_click(_f("main").s_checkbox("/CheckBox/").leftOf(_f("main").s_label($sfmName), 10, 10));
		}
		 _setStrictVisibilityCheck(false);

	};
	
	/**
	 * This function is mark the Parts field in Parts tab as Mandatory or Non Mandatory
	 */
	this.partsNotMandatory = function() {
		_setValue(_f("main").s_hscrollbar("horizontalScrollBar[2]"), "00");
		_click(_f("main").s_textinput("lblData").near(
				_f("main").s_richtext("Part")));
		_check(_f("main").s_checkbox("Required"));
		_click(_f("main").s_button("Save[3]"));
		_wait(3000, _isVisible(_f("main").label("Page saved")));

	};
	
	/**
	 * This function is mark the Parts line multi add to none or select 
	 */	
	this.partsMultiAdd = function($multiAdd){
		_click(_f("main").s_richtext("Parts"));
		_setSelected(_f("main").s_combobox("/ComboBox/").near(_f("main").uiftetextfield("Allow Multi Add Using")),$multiAdd);
		/*_setValue(_f("main").s_textinput(0).rightOf(_f("main").uiftetextfield("Allow Multi Add Using")), "");
		_setValue(_f("main").s_textinput(0).rightOf(_f("main").uiftetextfield("Allow Multi Add Using")), "Select");
		if($multiAdd =="Case"){
			_click(_f("main").s_label("Case[2]"));
		}else{
			_click(_f("main").s_label($multiAdd));
		}*/
		_click($bo_pg_sfmTransactionAndDesigner.btn_savePage);
		_wait(3000, _isVisible($bo_pg_sfmTransactionAndDesigner.label_pageSaved));		
	};
	/**
	 * This function is select/unselect a field read only/required
	 * Eg : 10429.sah  
	 */	
	this.setReadOnlyOrRequired = function($object,$attribute,$value){
		_click(_f("main").uiftetextfield($object));
		if($attribute=='Read Only'){
			if(_getValue($bo_pg_sfmTransactionAndDesigner.chk_readOnly)== $value){
				//do nothing
			}else{
				_click($bo_pg_sfmTransactionAndDesigner.chk_readOnly);
			}
			
		}else{
			if(_getValue($bo_pg_sfmTransactionAndDesigner.chk_required)== $value){
				//do nothing
			}else{
				_click($bo_pg_sfmTransactionAndDesigner.chk_required);
			}
			
		}
		_click($bo_pg_sfmTransactionAndDesigner.btn_pageLayoutSave);
		_wait(3000, _isVisible($bo_pg_sfmTransactionAndDesigner.page_saved));
	}
	
	/**
	 * This function is set form fill on a field
	 * $fieldName - field on which formfill to be set
	 * $objMapping - name of the mapping
	 * $nearBy - near which the object is present
	 * Eg : 10444.sah  
	 */	
	this.setFormFill = function($fieldName,$objMapping,$nearBy){
		if($nearBy == 'Parts' || $nearBy == 'Labor' || $nearBy == 'Expense' || $nearBy == 'Travel'){
			_click(_f("main").s_richtext($fieldName).near(_f("main").s_richtext($nearBy)));
		}else{
			_click(_f("main").s_textinput("txtIp").inside(_f("main").fieldrenderer($fieldName)));
		}
		_setSelected(_f("main").s_combobox("/ComboBox/").rightOf(_f("main").uiftetextfield("Object Mapping")),$objMapping);
		_click($bo_pg_sfmTransactionAndDesigner.btn_savePage);
		_wait(3000, _isVisible($bo_pg_sfmTransactionAndDesigner.label_pageSaved));
	};
	
	//Fill_setSelected(_f("main").s_combobox("ComboBox24974"), "SVMXSTD: Case To Work Order"); text values in SFM Lightning Delivery screen
	this.fillHeaderTextValues = function($labelsArray,$valuesArray) {
		var $i = 0;
		for($i=0;$i<$labelsArray.length;$i++){
			_setValue(_textbox(0,_near(_span($labelsArray[$i]))),$valuesArray[$i]);
			
		}	
	};
	
	
	
	//Fills picklist values in SFM Lightning Delivery screen.Author: Janaki
	this.fillHeaderPicklistValues = function($labelsArray,$valuesArray){
		var $i = 0;
		_selectDomain("/svmx/");
		for($i=0;$i<$labelsArray.length;$i++){
			_click(_div("/trigger-picker/",_near(_span($labelsArray[$i]))));
			_click(_listItem($valuesArray[$i]));
		}	
	};
	
	//Select checkboxes for header. Author : Janaki
	//Note: Checkbox values should be true or false
	this.selectHeaderCheckBox = function($checkBoxLabels,$checkBoxValues){
		var $i = 0;
		for($i = 0;$i<$checkBoxLabels.length;$i++){
			if($checkBoxValues[$i] === "true"){
				_check(_checkbox(0,_near(_label($checkBoxLabels[$i]))));
			
			}
			else if($checkBoxValues[$i] === "false"){
				_uncheck(_checkbox(0,_near(_label($checkBoxLabels[$i]))));
			}
		}		
	};
	
	//Fill text values in Extended Edit window for given text fields (Child Line Item) Author: Janaki
	this.fillChildTextValues = function($labelsArray,$valuesArray){
		var $i = 0;
		for($i=0;$i<$textLabels.length;$i++){
			_setValue(_textbox(0,_near(_label("/"+$labelsArray[$i]+"/"))),$valuesArray[$i]);
		}
	};
	
	//Fill text area values in Extended Edit for Child Line Item. Author : Janaki.
	this.fillChildTextArea = function($labelsArray,$valuesArray){
		var $i = 0;
		for($i=0;$i<$textLabels.length;$i++){
			_setValue(_textarea(0,_near(_label("/"+$labelsArray[$i]+"/"))),$valuesArray[$i]);
		}
	};
	
	//Fill picklist values in Extended Edit for Child line item. Author : Janaki.
	this.fillChildPicklists =  function($pickListLabels,$pickListValues){
	var $i = 0;
	for($i = 0;$i<$pickListLabels.length;$i++){
		_click(_div("/trigger-picker/",_near(_label("/"+$pickListLabels[$i]+"/"))));
		if(!_isVisible(_listItem($pickListValues[$i]))) {
			_click(_div("/trigger-picker/",_near(_label("/"+$pickListLabels[$i]+"/"))));
		}
		_click(_listItem($pickListValues[$i]));
	}
	};
	
	//Select checkboxes in Extended Edit window. Author : Janaki
	//Note: Checkbox values should be true or false
	this.selectChildCheckBox = function($checkBoxLabels,$checkBoxValues){
		var $i = 0;
		for($i = 0;$i<$checkBoxLabels.length;$i++){
			if($checkBoxValues[$i] === "true"){
				_check(_checkbox("/sfm-checkbox/",_near(_label($checkBoxLabels[$i]))));
			
			}
			else if($checkBoxValues[$i] === "false"){
				_uncheck(_checkbox("/sfm-checkbox/",_near(_label($checkBoxLabels[$i]))));
			}
		}		
	};
	
	//Fill values for Date/Time fields for Child Line items. Author : Janaki
	this.fillDateTimeFields = function($dateLabels,$dateValues,$timeValues){
		for($i = 0;$i<$dateLabels.length;$i++){
			_setValue(_textbox("/svmx-date/",_near(_label($dateLabels[$i]))),$dateValues[$i]);	
			_setValue(_textbox("/svmx-time/",_near(_label($dateLabels[$i]))),$timeValues[$i]);	
		}
	};
	
  //Fill values for Date fields for Child Line items. Author: Janaki
	this.fillDateFields = function($dateLabels,$dateValues){
		for($i = 0;$i<$dateLabels.length;$i++){
			_setValue(_textbox("/svmx-date/",_near(_label($dateLabels[$i]))),$dateValues[$i]);		
		}
	};
	
	
	//Select today for a selected Date or Date/Time field.Author: Janaki.
	this.selectToday = function($dateTimeField){
	_click(_div("/trigger-picker/",_near(_span($dateTimeField))));
	_click($sfm_pg_wo.link_today);
	};
	//Perform Quick Save in Lightning SFM Delivery.
	this.performQuickSave = function(){
		_click($sfm_pg_wo.btn_quickSave);
		_wait(3000);
		if(_isVisible($sfm_pg_wo.btn_okPriceNotCalculated)){
			_click($sfm_pg_wo.btn_okPriceNotCalculated);
		}		
	};
//Perform Product Search in WO child lines.This takes care of Multi line add as well.
	this.performProductSearchInChildLine = function($productName){
		_setStrictVisibilityCheck(true);
		_setValue(_textbox("/sfm-text/",_leftOf(_link("Search"))),$productName);
		_click($sfm_pg_wo.btn_productSearchChildLine);
		_wait(2000);
		if(_isVisible(_span("/x-grid-checkcolumn/",_leftOf(_div("/"+$productName+"/"))))) {
		  _click(_span("/x-grid-checkcolumn/",_leftOf(_div("/"+$productName+"/"))));	
		  _click($sfm_pg_wo.btn_addProductChildLine);
		}
		else if(_isVisible(_link($productName))){
		 	_click(_link($productName));	
		}
		else {
			_log("Product Search failed");
		}
	};
	
//Add new child line for Parts,labor,travel and expense.
//Author: Janaki
//This function can add new child line based on the input values given.
//The fields given here should already be given in the screen designer.
//Pass empty array as paramater "[]" if there are no such fields in that data type that needs to be filled
	this.addChildLine = function($lineType,$productName,$textLabels,$textValues,$pickListLabels,$pickListValues,$textAreaLabels,$textAreaValues,$checkBoxLabels,$checkBoxValues,$dateLabels,$dateValues,$dateTimeLabels,$dateTimeDateValues,$timeValues){
		_click(_span($lineType));
		_click(_span("+ Add "+$lineType));
		_wait(2000);
		_setStrictVisibilityCheck(true);
		if(_isVisible(_div("Recent Items: Products"))){
			this.performProductSearchInChildLine($productName);
		}
		var $x = _count("_row", "/.*/",_in(_div("/x-grid-item-container/")));
		$x = $x-1;
		_log($x);
		_call(_div("x-action-col-icon x-action-col-0  x-sfmd-edit-icon["+$x+"]").scrollIntoView());
		_click(_div("x-action-col-icon x-action-col-0  x-sfmd-edit-icon["+$x+"]"));
		_click(_div("x-action-col-icon x-action-col-0  x-sfmd-edit-icon["+$x+"]"));
		_wait(1000);
		_click(_span("Edit"));
		//Input values in Extended Edit window.
		_setStrictVisibilityCheck(true);
		//Text values first
		if($textLabels.length > 0) {
			this.fillChildTextValues($textLabels,$textValues);
		}
		//Picklist values next..
		if($pickListLabels.length > 0){
			this.fillChildPicklists($pickListLabels, $pickListValues);
		}
		//Textarea fields
		if($textAreaLabels.length > 0){
			this.fillChildTextArea($textAreaLabels,$textAreaValues);
		}
		//Checkboxes
		if($checkBoxLabels.length > 0){
			this.selectChildCheckBox($checkBoxLabels, $checkBoxValues)
		}
		//Date fields
		if($dateLabels.length > 0){
			this.fillDateFields($dateLabels, $dateValues);
		}
		//Date/Time fields
		if($dateTimeLabels.length > 0){
			this.fillDateTimeFields($dateTimeLabels,$dateTimeDateValues,$timeValues);
		}					
	 _click($sfm_pg_wo.btn_updateExtEdit);	
	};

//Function to verify values based on the input arrays given
//Returns true or false based on the verification result.
//Text,Picklist and Date fields can be combined into a single array
//Time field of Date/Time fields should be given as separate array with the same label
//Text area should be given as a separate array
//Checkboxes should be given as separate array.
//Pass empty arrays "[]" as parameters if nothing of that data type needs to be verified.
// Author: Janaki
	

this.verifyValuesInDelivery = function($textPicklistDateLabels,$textPicklistDateExpValues,$timeLabels,$timeExpValues,$textAreaLabels,$textAreaExpvalues,$checkBoxLabels,$checkBoxExpValues,$multiPickLabels,$multiPickValues){
	
	//Call individual functions to verify values of various data types
	var $result = true; var $x;
	//First text and picklists
	if($textPicklistDateLabels.length > 0){
		$x = this.verifyTextPicklistValues($textPicklistDateLabels, $textPicklistDateExpValues);
		_log($x);
		$result = Boolean($result && $x);
	}
	if($timeLabels.length > 0){
		$x = this.verifyTimeValues($timeLabels,$timeExpValues);
		_log($x);
		$result = Boolean($result && $x);
	}
	if($textAreaLabels.length > 0){
		$x = this.verifyTextAreaValues($textAreaLabels,$textAreaExpvalues);
		_log($x);
		$result = Boolean($result && $x);
	}
	if($checkBoxLabels.length > 0){
		$x = this.verifyCheckBoxValues($checkBoxLabels,$checkBoxExpValues);
		_log($x);
		$result = Boolean($result && $x);
	}
	if($multiPickLabels.length > 0){
		$x = this.verifyMultiPicklistValuesInDelivery($multiPickLabels, $multiPickValues)
		_log($x);
		$result = Boolean($result && $x);
	}
_log($result);
return $result;
};
	
	

	this.verifyTextPicklistValues = function($textPicklistDateLabels,$textPicklistDateExpValues){
		//Verifies text and picklist values
		var $i = 0; var $actualList = [];
		for($i=0;$i<$textPicklistDateLabels.length;$i++){
		 		$actualList.push(_getValue(_textbox(0,_near(_label($textPicklistDateLabels[$i])))));
		 		_log("Expected Value for "+$textPicklistDateLabels[$i]+": "+$textPicklistDateExpValues[$i]);
		 		_log("Actual Value for "+$textPicklistDateLabels[$i]+": "+$actualList[$i]);
			}
		_log($textPicklistDateExpValues);
		_log($actualList);
		if(_areEqual($textPicklistDateExpValues,$actualList)){
			_log("Text , Picklist values match");
			return true;
		}
		else
			{
			 _log("Text , Picklist values do not match");
			 return false;
			}
	};
	
	this.verifyTimeValues = function($timeLabels,$timeExpValues) {
		var $i = 0; var $actualList = [];
		for($i=0;$i<$timeLabels.length;$i++){
		 		$actualList.push(_getValue(_textbox(1,_near(_label($timeLabels[$i])))));
		 		_log("Expected Value for "+$timeLabels[$i]+": "+$timeExpValues[$i]);
		 		_log("Actual Value for "+$timeLabels[$i]+": "+$actualList[$i]);
			}
		_log($timeExpValues);
		_log($actualList);
		if(_areEqual($timeExpValues,$actualList)){
			_log("Time values match");
			return true;
		}
		else
			{
			    _log("Time values do not match");
				return false;
			}	
	};
	this.verifyTextAreaValues = function($textAreaLabels,$textAreaExpvalues){
		var $i = 0; var $actualList = [];
		for($i=0;$i<$textAreaLabels.length;$i++){
		 		$actualList.push(_getValue(_textarea(0,_near(_label($textAreaLabels[$i])))));
		 		_log("Expected Value for "+$textAreaLabels[$i]+": "+$textAreaExpvalues[$i]);
		 		_log("Actual Value for "+$textAreaLabels[$i]+": "+$actualList[$i]);
			}
		_log($textAreaExpvalues);
		_log($actualList);
		if(_areEqual($textAreaExpvalues,$actualList)){
			_log("Text area values match");
			return true;
		}
		else
			{
				_log("Text area values do not match");
				return false;
			}	
	};
	
	this.verifyCheckBoxValues =  function($checkBoxLabels,$checkBoxExpValues){
		var $i = 0; var $actualList = [];
		var $x;
		for($i=0;$i<$checkBoxLabels.length;$i++){
			$x = _condition(_checkbox(0,_near(_label($checkBoxLabels[$i]))).checked );
			$actualList.push($x);
			_log("Expected Value for "+$checkBoxLabels[$i]+": "+$checkBoxExpValues[$i]);
	 		_log("Actual Value for "+$checkBoxLabels[$i]+": "+$actualList[$i]);
		}
		_log($checkBoxExpValues);
		_log($actualList);
		if(_areEqual($checkBoxExpValues,$actualList)){
			_log("CheckBox values match");
			return true;
		}
		else
			{
			    _log("Checkbox values do not match");
				return false;
			}	
	};
	this.verifyMultiPicklistValuesInDelivery = function($multiPickLabels,$multiPickValues){
		//This function verifies the given values in the multipicklists and returns
		//true or false based on the results
		var $i = 0;
		var $uniqueMulti = [];var $actualList = [];
		//find out the unique list of multi picklists
		for($i=0;$i<$multiPickLabels.length;$i++){
			if($uniqueMulti.indexOf($multiPickLabels[$i]) == -1){
				$uniqueMulti.push($multiPickLabels[$i]);
			}
		}
		_log($uniqueMulti);
		var $j=0;var $z=0;var $result = true;var $x;
		for($i=0;$i<$uniqueMulti.length;$i++){
			var $actualList = [];
			var $currentMultiValues = [];
			for($j=0;$j<$multiPickValues.length;$j++){
				if($multiPickLabels[$j] == $uniqueMulti[$i]){
						$currentMultiValues.push($multiPickValues[$j]);
				}
			}
			for($z=0;$z<$currentMultiValues.length;$z++){
				if(_isVisible(_div($currentMultiValues[$z],_near(_label($uniqueMulti[$i]))))){
					$actualList.push($currentMultiValues[$z]);
				}
			 }
			_log("Expected values for "+$uniqueMulti[$i]+" "+$currentMultiValues);
			_log("Actual values for "+$uniqueMulti[$i]+" "+$actualList);
			if(_areEqual($currentMultiValues,$actualList)){
				_log("Multi Picklist values for "+$uniqueMulti[$i]+" match");
				$x = true;
				$result = Boolean($result && $x);
			}
			else
				{
				    _log("Multi Picklist values for "+$uniqueMulti[$i]+"do not match");
				    $x = false;
					$result = Boolean($result && $x);
				}		
			
		}
return $result;	
};
	this.addUserLookupInScreenDesigner = function($fieldName,$containerName){
		//This function adds a user lookup which needs special handling in the screen designer
		//to an existing page layout
		_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
		_click(_f("main").s_datagroup("dataGroup").near(_f("main").s_richtext($containerName)));
		_click(_f("main").s_label($fieldName));
		_click($bo_pg_sfmTransactionAndDesigner.btn_addFieldToPage);
		_click($bo_pg_sfmTransactionAndDesigner.btn_pageLayoutSave);
		_wait(3000, _isVisible($bo_pg_sfmTransactionAndDesigner.label_pageSaved));
		
	};
	
	/**
	 * Author		:	Anand Kakhandaki
	 * Function		:	To search and add items on header object lookup field
	 * Parameters	:	$object= Name of object on the header. Ex: case on the Work order 
	 * 					$searchObject= Name of the item need to be searched
	 * Returns		: 	Nothing
	 * Example		: 	Refer RS_10431.sah for funtion usage
	 */
	this.searchAndAddHeaderField=function($object,$searchObject){
		this.searchHeaderField($object, $searchObject);
		_click(_link($searchObject));
		_wait();
		var $appendedValue=_getText(_textbox("/inputEl/",_near(_span($object))));
		if ($appendedValue==$searchObject) {
			_log("Pass");
		}else{
			_log("fail");
		}
	};
	
	/**
	 * Author		:	Anand Kakhandaki
	 * Function		:	To search items on header object lookup field
	 * Parameters	:	$object= Name of object on the header. Ex: case on the Work order 
	 * 					$searchObject= Name of the item need to be searched
	 * Returns		: 	Nothing
	 * Example		: 	Refer RS_10431.sah for funtion usage
	 */
	this.searchHeaderField=function($object,$searchObject){
		_click(_div("/trigger-search/",_in(_div($object))));
		_wait(5000,_isVisible($sfm_pg_wizards.lbl_searchWindowLabel));
		_setValue($sfm_pg_wizards.txt_searchObj,$searchObject);
		_click($sfm_pg_wizards.btn_objectSearch);
		_wait(5000,_isVisible(_link($searchObject)));
		if (_exists(_link($searchObject))) {
			_log("Pass");
		}
		else{
			_log("Fail");
		}
	};
	
	this.checkprocessexists=function($sfmName, $isCustom) 
			 {
		$bo_act_navigation.navigateToSfmTransactionDesigner();
		_click($bo_pg_sfmTransactionAndDesigner.btn_yourCustomSfmTransactions);
		_setValue($bo_pg_sfmTransactionAndDesigner.lbl_searchSFM, $sfmName);
		_wait(10000);
		
//		
		
		if (_isVisible(_f("main").s_checkbox("/chk/i").leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process exists successfully")
			return true;
			
		} else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName), 10, 10))) {
			_log("Process exists successfully")
			return true;
		}
		else if (_isVisible(_f("main").s_checkbox(2).leftOf(_f("main").s_label($sfmName+"[1]"), 10, 10))) {
			_log("Process exists successfully");
			return true;
		}
		else{
			return false;
		}
			
		};
		
	this.addTemplateDesigner = function($stdTemplate){
		_click($bo_pg_sfmTransactionAndDesigner.templateDesigner);
		_wait(2000);
		_setSelected($bo_pg_sfmTransactionAndDesigner.select_template, $stdTemplate);
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_tempName,"Tester33");
		_setValue($bo_pg_sfmTransactionAndDesigner.txt_tempId,"Tester33");
		_click($bo_pg_sfmTransactionAndDesigner.btn_templateSaveAs);
		_wait(3000);
		if(_isVisible($bo_pg_sfmTransactionAndDesigner.lbl_templateSave)){
			_log("Pass");
		}
		else{
			_fail("Fail::Template not Saved");
		}
	};
	
	this.addTargetObjectUpdate = function($clicks){
		_click($bo_pg_sfmTransactionAndDesigner.targetObjectUpdate);
		_click(_f("main").s_label("Work Order[2]"));
		_click(_f("main").s_button("Add a row"));
		for(var $i=0;$i<$clicks;$i++){
			_click(_f("main").s_button("+"));
		}
	};
	
	this.addFields = function($field,$condition,$value){
		_click(_f("main").s_label("Click to add field"));
		_setValue(_f("main").s_textinput("searchText[4]"),$field);
		_doubleClick(_f("main").s_label($field));
		_setSelected(_f("main").s_dropdownlist("conditionsCombo"),$condition);
		_setValue(_f("main").s_textinput("textip"),$value);
		
	};
			
	
};