var $sfm_act_lightningConfig = new function sfm_act_lightningConfig() {
	
	this.switchToLightningInConfig = function($profileName,$selectedProfile){
		if(_isVisible($bo_pg_home.link_servicemaxSetup) == true )
		{
			_click($bo_pg_home.link_servicemaxSetup);
		}
		else
		{
			_click($bo_pg_home.link_more); 
			if(_isVisible($bo_pg_home.link_servicemaxSetup)==true){
				_click($bo_pg_home.link_servicemaxSetup);
			}
			else{
				_click($bo_pg_home.button_allLinks);
				_click($bo_pg_home.link_servicemaxSetup);
			}
			
			
		}
		_click(_div("Configuration Profiles"));
		_click(_checkbox(0,_leftOf(_span($profileName))));
		_click(_submit("/Edit/",_near(_heading2("Group-wide Configuration Settings"))));
		var $profiles = _getText(_select("selectedProfil1"));
		for(var $i=0;$i<$profiles.length;$i++){
			if($profiles[$i]==$selectedProfile){
				_setSelected(_select(0,_rightOf(_label("Select Module"))),"SFM Transaction Manager");
				_setSelected(_select(0,_rightOf(_label("Select Submodule"))),"SFM Transaction Delivery Engine");
				var $settingId = _getText(_cell(0,_under(_tableHeader("Setting ID"))));
				if($settingId=="SET004"){
					_click(_link("Edit",_near(_cell("SET004"))));
					_selectWindow("Servicemax_Conf_Prof");
					_setSelected(_select(0,_near(_label("Choose Option"))),"Lightning");
					_click(_button("Save"));
					_closeWindow();
				}
				break;
			}
		}
	};
	this.switchToLightning = function(){
		if(_isVisible($bo_pg_home.link_switchToLightning)==true){
			_click($bo_pg_home.link_switchToLightning);
		}
	};
	this.switchToClassic = function(){
		if(_isVisible($bo_pg_home.circular_image)==true){
			_click($bo_pg_home.circular_image);
			_click($bo_pg_home.link_switchToSalesforce);
		}
	};
	this.verifyUrlForLightning = function(){
		var $url = "";
		_set($url,window.document.location.href);
		if($url.indexOf("lightning")!=-1){
			_log("The Url is in Lightning");
		}
		else{
			_log("The Url is in classic");
		}
	};
	this.navigateToObjectsInLightning = function($object_name) {
		//Added by JJ
		//This function navigates to the Object Manager in Lightning and then to a given object.
		//This is Lightning specific.
		_click($sfm_pg_wo.link_lightning_setup);
		_click($sfm_pg_wo.link_currentapp_setup);
		_selectWindow("Home | Salesforce");
		_wait(3000,isVisible($sfm_pg_wo.link_object_manager));
		_click($sfm_pg_wo.link_object_manager);
		_selectWindow("/Object Manager/");
		_setValue($sfm_pg_wo.txt_quick_find,$object_name);
		_click(_link($object_name));
		
		
	};
	this.addDependentControllingPicklistValues = function($ctrl_picklist_name,$ctrl_picklist_value,$dep_picklist_value) {
		//Added by JJ.
		//This function adds a dependent picklist value to the controlling picklist value.
		
		var $header_row = _getText(_row("/"+$ctrl_picklist_name+":/"));
		var $header_list = $header_row.split(" ");
		var $noOfSpaces = 1;
		var $i = 0;
		for($i=0;$i<$ctrl_picklist_name.length;$i++){
			if($ctrl_picklist_name.charAt($i) == " "){
				$noOfSpaces = $noOfSpaces + 1;
			}
		}
		
		var $index = $header_list.indexOf($ctrl_picklist_value);
		var $index = $index - $noOfSpaces;
		_click(_cell($dep_picklist_value+"["+$index+"]"));
		_click($sfm_pg_wo.btn_include_values);
	};


this.checkIfWizardLinkExists = function($process_name){
	if(_exists(_link($sfm_pg_wo.link_showmore))){
		_click(_link($sfm_pg_wo.link_showmore));
	}
	//Check if the SFM process link exists
	if(_exists(_span($process_name))){
		return true;
	}
	else {
		return false;
	}

};

this.logoutInLightning = function() {
	//Added by JJ
	//This function logs out of Salesforce in Lightning experience
	_selectDomain();
	_click($sfm_pg_wo.link_profileImageRightCorner);
	_wait(1000);
	_click($sfm_pg_wo.link_lightningLogout);
	
};

this.createWorkDetailInLightning = function($recordType,$lineType){
	//Added by JJ
	//This function creates a work detail record in Lightning mode
	//This returns the Work detail Line number to the calling function
	//Please use Record type as follows
	//**********************************
	//"Estimate" for "Estimate of work to be performed."
	//"Products Serviced" for "Products Serviced".
	//"Request" for "Request/Receipt"
	//"Usage" for "Usage/Consumption"
	//***********************************

	var $lineNumber;
	_click($sfm_pg_wo.link_relatedListsTab);
	_click($sfm_pg_wo.btn_newButtonForWorkDetail);
	_click(_span("/slds-radio--faux/",_leftOf(_span("/"+$recordType+"/",_in(_div("/modal-body scrollable/"))))));
	_click($sfm_pg_wo.btn_nextForWorkDetailRecordType);
	_click($sfm_pg_wo.link_lineTypeArrow);
	_click(_link($lineType));
	_click($sfm_pg_wo.btn_wo_edit_save);
	_wait(500);
	_assertVisible(_span("Work Detail was created."));
	_click($sfm_pg_wo.link_workDetailAfterCreation);
	$lineNumber = _getText(_heading1("/WL-/"));
	return $lineNumber;
};

this.clearServicemaxCache = function(){
	//This function clears servicemax cache in Lightning
	//Author: Janaki
	if(_isVisible($sfm_pg_wo.btn_arrowNextToGetPrice)){
		_click($sfm_pg_wo.btn_arrowNextToGetPrice);
	}
	else {
		    _click($sfm_pg_wo.btn_arrowNextToUserSettings);
	}
	_click($sfm_pg_wo.link_clearSvmxCache);
	_setStrictVisibilityCheck(true);
	if(_isVisible($sfm_pg_wo.btn_proceedForCancel)){
	   _click($sfm_pg_wo.btn_proceedForCancel);
	}
	_setStrictVisibilityCheck(false);
	_wait(4000);
	};
	
this.openExtEditForLatestItem = function(){
	var $x = _count("_row", "/.*/",_in(_div("/x-grid-item-container/")));
	$x = $x-1;
	_log($x);
	_click(_div("x-action-col-icon x-action-col-0  x-sfmd-edit-icon["+$x+"]"));
	_wait(1000);
	_click(_span("Edit"));
	
};



this.navigateToCreateCustomObject = function(){
	//Added by Harish CS
	_click(_div("Setup"));
	_click(_span("Setup[1]"));
	_selectWindow("Home | Salesforce");
	_click(_link("Create"));
	_click(_span("Custom Object"));
}

this.addPermissionToCustomObject = function($searchFor,$profileName,$objectName){
	//Added by Harish CS
	$checkboxCount = 6;
	_click(_div("Setup"));
	_click(_span("Setup[1]"));
	_selectWindow("Home | Salesforce");
	_setValue(_searchbox("Quick Find"),$searchFor);
	_click(_mark("Profiles"));
	_selectDomain("cs77.salesforce.com");
	_selectWindow();
	_click(_span("/Edit/",_leftOf(_span($profileName))));
	for(var $i=0;$i<$checkboxCount;$i++){
		_click(_checkbox($i,_rightOf(_tableHeader($objectName))));
	}
	_click(_submit("/Save/"));
};

this.deleteStepFromWizard = function($wizardObject,$wizardName,$processName){
	//deletes a given step from a given wizard
	$bo_act_navigation.navigateToSvmxSetup();
	_selectDomain($g_domain);
	_click(_div("Service Flow Manager"));
	_click(_div("SFM Wizards"));
	_setSelected($sfm_pg_wizards.selectObject,$wizardObject);
	_wait(3000);
	_click(_checkbox(0,_leftOf(_span($wizardName))));
	_click($sfm_pg_wo.btn_editWizardStep);
	_click($sfm_pg_wo.btn_manageWizardSteps);
	if(_isVisible(_span($processName))){
		_click(_checkbox(0,_leftOf(_span($processName))));
		_expectConfirm($sfm_pg_wo.btn_deleteStepFromWizard);
		_click($sfm_pg_wo.btn_deleteStepFromWizard);
		_wait(5000,_isVisible($sfm_pg_wo.msg_wizardStepDeleteSuccess));	
	}
};

this.addCustomFields = function($objectName,$fieldNames,$dataTypes,$myDomain,$multiPicklistValues,$lookupType){
	//Function to add set of custom fields to the given object
	//Creates only if object is already not present.
	//Author:Janaki
	var $i = 0;var $z = 0;
	$sfm_act_lightningConfig.navigateToObjectsInLightning($objectName);
	_selectWindow("/"+$objectName+"/");
	_click($sfm_pg_wo.link_fieldsAndRelationships);
	_selectDomain();
	for($i=0;$i<$fieldNames.length;$i++){
		_setValue($sfm_pg_wo.txt_quickFindFields,$fieldNames[$i]);
		_wait(15000);
		if(_isVisible(_div("No items to display."))){
			_click($sfm_pg_wo.btn_newCustomField);
			_selectDomain($myDomain);
			_click(_radio("/dtype/",_in(_cell($dataTypes[$i]))));
			_click($sfm_pg_wo.btn_nextInAddCustomFields);
			if($dataTypes[$i] === "Lookup Relationship"){
				_setSelected(_select(0,_near(_label("*Related To"))),$lookupType[$i]);
				_click($sfm_pg_wo.btn_nextInAddCustomFields);
				_click($sfm_pg_wo.btn_nextInAddCustomFields);
			}
			
			_setValue($sfm_pg_wo.txt_customFieldName,$fieldNames[$i]);
			//Add multi picklist values if needed
			if($dataTypes[$i] === "Picklist (Multi-Select)" || $dataTypes[$i] === "Picklist"){
				_check($sfm_pg_wo.radio_multiPicklist);
				for($z=0;$z<$multiPicklistValues.length;$z++){
					_type($sfm_pg_wo.txt_multiPickTextArea,$multiPicklistValues[$z]);
					_keyPress($sfm_pg_wo.txt_multiPickTextArea,13);
				}
			}
			_click($sfm_pg_wo.btn_nextInAddCustomFields);
			_click($sfm_pg_wo.btn_nextInAddCustomFields);
			_click($sfm_pg_wo.btn_saveCustomField);
			_selectDomain();
		}
		else {
			   _log($fieldNames[$i]+" already present in "+$objectName+" object");
			}
	}
};
	

this.findIfFieldPresentInPageLayout = function($fieldName){
	//This function checks if one field is present in the currently opened page page layout and returns true or false
	//Author : Janaki
		var $i = 0; var $j = 0;
		var $result = false;
		_setStrictVisibilityCheck(true);
		if(_isVisible(_span("/"+$fieldName+"/"))){
			var $collect = _collect("_span","/"+$fieldName+"/");
			$i = 0;
			for($i=0;$i<$collect.length;$i++){
				var $x = _getText($collect[$i]);
				if($x === $fieldName){
				   $result = true;
				}
				else {
					continue;
				}
			}
		}
		else {
			  $result = false;
			 }
		
_log($result);
_setStrictVisibilityCheck(false);
return $result;
};

this.addFieldsToLightningPageLayout = function($object_name,$pageLayoutForProfile,$fieldsArray,$myDomain){
	//This function adds the given fields to the given Lightning component layout
	//Example: Missing fields in Work order page layout
	//Author: Janaki
	var $i = 0;
	_selectWindow("/"+$object_name+"/");
	_click(_link("Page Layouts"));
	_click(_link($pageLayoutForProfile));
	_selectDomain($myDomain);
	for($i=0;$i<$fieldsArray.length;$i++){
		_setValue($sfm_pg_wo.txt_pgLayoutQuickFind,$fieldsArray[$i]);
		var $shortName = $fieldsArray[$i].substr(0,4);
		_dragDrop(_span("/"+$shortName+"/"),_span("Information(Header visible on edit only)"));
	}
	_click($sfm_pg_wo.btn_pgLayoutSave);
	_wait(3000);	
};
this.openExistingProcess = function($processName){
	//Opens the given process in SFM Designer
	_setSpeed(3000);
	$bo_act_navigation.navigateToSfmTransactionDesigner();
	$sfm_act_SFM.selectSFM($process_to_clone,true);
	_click(_f("main").s_label($processName));
	_wait(5000);
};
this.deletePageLayout = function($pageLayoutName){
	//Deletes the custom page layout created as part of test case cleanup
	//Author:Janaki
	_selectDomain($g_domain);
	_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
	var $actualPgLayout = _getText($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAs);
	if($actualPgLayout === $pageLayoutName){
		_click($bo_pg_sfmTransactionAndDesigner.btn_deletePageLayout);
		if(_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yes)){
			_click($bo_pg_sfmTransactionAndDesigner.btn_yes);
		}
		_wait(3000);
	}
};

this.deleteMappingFromProcess = function($containerName,$mappingName){
	//Deletes mapping created as part of test case cleanup
	//Author: Janaki
	_selectDomain($g_domain);
	_click($bo_pg_sfmTransactionAndDesigner.btn_qualifyingCriteriaAndFieldMapping);
	_click($sfm_pg_sfmMapping.btn_mappingTab);
	if($containerName === "Work Order" && _isVisible($sfm_pg_sfmMapping.tab_valueMapForExisting)){
		_click($sfm_pg_sfmMapping.btn_deleteValueMappingExistingRecord);
	}
	else if($containerName != "Work Order" && _isVisible($sfm_pg_sfmMapping.tab_valueMapForNew)){
		_click($sfm_pg_sfmMapping.btn_deleteValueMapNewRecord);
	   }
	else if (_isVisible($sfm_pg_sfmMapping.tab_fieldMapForExisting)){
		_click($sfm_pg_sfmMapping.btn_deleteFieldMapExistingRecord);
	}
	if(_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yes)){
		_click($bo_pg_sfmTransactionAndDesigner.btn_yes);
	}
	_wait(3000);
};
this.deleteSfmProcess = function($processName){
	//Deletes an SFM process as part of test case cleanup
	//Author : Janaki
	$bo_act_navigation.navigateToSfmTransactionDesigner();
	$sfm_act_SFM.selectSFM($process_to_clone,false);
	_click($bo_pg_sfmTransactionAndDesigner.btn_deleteSfmProcess);
	if(_isVisible($bo_pg_sfmTransactionAndDesigner.btn_yes)){
		_click($bo_pg_sfmTransactionAndDesigner.btn_yes);
	}
	_wait(8000);
};
this.editWorkOrder = function($textLabels,$textValues,$pickListLabels,$pickListValues,$textAreaLabels,$textAreaValues,$checkBoxLabels,$checkBoxValues,$dateTimeLabels,$dateTimeDateValues,$timeValues,$emailLabels,$emailValues,$multiPickLabels,$multiPickValues,$urlLabels,$urlValues,$telephoneLabels,$telephoneValues){
	//This function edits work order in Lightning mode
	//Author : Janaki
	//Text values and Date values can be combined into a single array
	
	//Click any of the pencil icons to open edit mode
	
	_setStrictVisibilityCheck(true);
	_wait(6000);
	//_call(_span("Clock Paused Forever").scrollIntoView());
    _click($sfm_pg_wo.btn_pencilToEditWo);
	var $i = 0;
	//Fill text values 
	if($textLabels.length > 0){
		for($i=0;$i<$textLabels.length;$i++){
			_setValue(_textbox("/"+$textLabels[$i]+"/"),$textValues[$i]);
		}
	}
	//Then Fill all picklists
	if($pickListLabels.length > 0){
		//Fill picklist values
		for($i=0;$i<$pickListLabels.length;$i++){
			_click(_link(0,_near(_span($pickListLabels[$i]))));
			_click(_link($pickListValues[$i]));
		}
	}
	//TextAreas to be filled next
	if($textAreaLabels.length > 0){
		for($i=0;$i<$textAreaLabels.length;$i++){
			_setValue(_textarea(0,_near(_span($textAreaLabels[$i]))),$textAreaValues[$i]);
		}
	}
	//Checkboxes are filled
	if($checkBoxLabels.length > 0){
		for($i=0;$i<$checkBoxLabels.length;$i++){
			if($checkBoxValues[$i] === "true"){
				_check(_checkbox(0,_near(_span($checkBoxLabels[$i]))));
			
			}
			else if($checkBoxValues[$i] === "false"){
				_uncheck(_checkbox(0,_near(_span($checkBoxLabels[$i]))));
			}
		}
	}
	
	//Fill all Date Time fields
	if($dateTimeLabels.length > 0){
		for($i=0;$i<$dateTimeLabels.length;$i++){
			_setValue(_textbox("/Date/",_near(_span($dateTimeLabels[$i]))),$dateTimeDateValues[$i]);
			_setValue(_textbox("/Time/",_near(_span($dateTimeLabels[$i]))),$timeValues[$i]);
		}
	}
	//Fill email fields
	if($emailLabels.length > 0){
		for($i=0;$i<$emailLabels.length;$i++){
			_setValue(_emailbox("/" + $emailLabels[$i] + "/"),$emailValues[$i]);
		}
	}
   //Fill multi picklists
	if($multiPickLabels.length > 0){
		var $uniqueMulti = [];
		//find out the unique list of multi picklists
		for($i=0;$i<$multiPickLabels.length;$i++){
			if($uniqueMulti.indexOf($multiPickLabels[$i]) == -1){
				$uniqueMulti.push($multiPickLabels[$i]);
			}
		}
		_log($uniqueMulti);
		var $j=0;var $p=0;
		for($i=0;$i<$uniqueMulti.length;$i++){
			var $actualList = [];
			var $currentMultiValues = [];
			for($j=0;$j<$multiPickValues.length;$j++){
				if($multiPickLabels[$j] == $uniqueMulti[$i]){
						$currentMultiValues.push($multiPickValues[$j]);
					
				}
			}
			_log($currentMultiValues);
			for($p=0;$p<$currentMultiValues.length;$p++){
				_click(_span($currentMultiValues[$p],_in(_div("/Available/"),_near(_div("/"+$uniqueMulti[$i]+"/")))));
				_call(_button("Move selection to Chosen").click());
			}
		
			
			_setStrictVisibilityCheck(true);
	}
}
	//Fill URL fields
	if($urlLabels.length > 0){
		for($i=0;$i<$urlLabels.length;$i++){
			_setValue(_urlbox($urlLabels[$i]),$urlValues[$i]);
		}
	}
	//Fill Telephone number values.
if($telephoneLabels.length > 0){
		
	for($i=0;$i<$telephoneLabels.length;$i++){
		_setValue(_telephonebox($telephoneLabels[$i]),$telephoneValues[$i]);
	}
}
	
	
//Saving everything together
_click($sfm_pg_wo.btn_saveEditWO);
_wait(2000);
};

this.verifyValues = function($textLabels,$textValues,$pickListLabels,$pickListValues,$textAreaLabels,$textAreaValues,$checkBoxLabels,$checkBoxValues,$dateTimeLabels,$dateTimeDateValues,$timeValues,$emailLabels,$emailValues,$lookUpLabels,$lookUpValues,$multiPickLabels,$multiPickValues,$urlLabels,$urlValues,$telephoneLabels,$telephoneValues){
	//This function takes the values in a given object/record, compares with expected values
	//and returns true/false on the basis of the results
	//Author : Janaki
	_setStrictVisibilityCheck(true);
	//_call(_span("Clock Paused Forever").scrollIntoView());
	_click($sfm_pg_wo.btn_pencilToEditWo);
	var $i = 0;
	var $result = true;
	var $actualList = [];
	if($textLabels.length > 0){
			for($i=0;$i<$textLabels.length;$i++){
				$actualList.push(_getValue(_textbox("/"+$textLabels[$i]+"/")));
				_log("Expected value for "+$textLabels[$i]+":"+$textValues[$i]);
				_log("Actual value for"+$textLabels[$i]+":"+$actualList[$i]);
			}
			if(_areEqual($textValues,$actualList)){
				_log("Text & Date values match");
				$x = true;
				$result = Boolean($result && $x);
			}
			else {
				_log("Text & Date values do not match");
				$x = false;
				$result = Boolean($result && $x);
			}
	}
	$actualList = [];
	if($pickListLabels.length > 0){
		for($i=0;$i<$pickListLabels.length;$i++){
			$actualList.push(_getText(_link(0,_near(_span($pickListLabels[$i])))));
			_log("Expected value for "+$pickListLabels[$i]+":"+$pickListValues[$i]);
			_log("Actual value for"+$pickListLabels[$i]+":"+$actualList[$i]);
			
		}
		if(_areEqual($pickListValues,$actualList)){
			_log("Picklist values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Picklist values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}
	}
	$actualList = [];
	if($textAreaLabels.length > 0){
		for($i=0;$i<$textAreaLabels.length;$i++){
			$actualList.push(_getText(_textarea(0,_near(_span($textAreaLabels[$i])))));
			_log("Expected value for "+$textAreaLabels[$i]+":"+$textAreaValues[$i]);
			_log("Actual value for"+$textAreaLabels[$i]+":"+$actualList[$i]);
			
		}
		if(_areEqual($textAreaValues,$actualList)){
			_log("Text Area values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Text Area values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}
	}
	$actualList = [];
	if($checkBoxLabels.length > 0){
		for($i=0;$i<$checkBoxLabels.length;$i++){
			$actualList.push(_getAttribute(_checkbox("/"+$checkBoxLabels[$i]+"/"),"checked"));
			_log("Expected value for "+$checkBoxLabels[$i]+":"+$checkBoxValues[$i]);
			_log("Actual value for"+$checkBoxLabels[$i]+":"+$actualList[$i]);
		}
	}
	$actualList = [];
	if($dateTimeLabels.length > 0){
		for($i=0;$i<$dateTimeLabels.length;$i++){
			$actualList.push(_getValue(_textbox("/Date/",_near(_span($dateTimeLabels[$i])))));
			_log("Expected date value for "+$dateTimeLabels[$i]+":"+$dateTimeDateValues[$i]);
			_log("Actual date value for"+$dateTimeLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($dateTimeDateValues,$actualList)){
			_log("Date/Time Date values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Date/Time Date values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}
	$actualList = [];
	if($dateTimeLabels.length > 0){
		for($i=0;$i<$dateTimeLabels.length;$i++){
			$actualList.push(_getValue(_textbox("/Time/",_near(_span($dateTimeLabels[$i])))));
			_log("Expected time value for "+$dateTimeLabels[$i]+":"+$timeValues[$i]);
			_log("Actual time value for"+$dateTimeLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($timeValues,$actualList)){
			_log("Date/Time Time values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Date/Time Time values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}
	$actualList = [];
	if($emailLabels.length > 0){
		for($i=0;$i<$emailLabels.length;$i++){
			$actualList.push(_getValue(_emailbox("/"+$emailLabels[$i]+"/")));
			_log("Expected date value for "+$emailLabels[$i]+":"+$emailValues[$i]);
			_log("Actual date value for"+$emailLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($emailValues,$actualList)){
			_log("Email values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Email values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}
	$actualList = [];
	if($lookUpLabels.length > 0){
		for($i=0;$i<$lookUpLabels.length;$i++){
			$actualList.push(_getText(_span($lookUpValues[$i],_near(_span($lookUpLabels[$i])))));
			_log("Expected date value for "+$lookUpLabels[$i]+":"+$lookUpValues[$i]);
			_log("Actual date value for"+$lookUpLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($lookUpValues,$actualList)){
			_log("Lookup values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Lookup values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}
	$actualList = [];
	//Verify Multi picklist values
	var $i = 0;
	var $uniqueMulti = [];
	//find out the unique list of multi picklists
	for($i=0;$i<$multiPickLabels.length;$i++){
		if($uniqueMulti.indexOf($multiPickLabels[$i]) == -1){
			$uniqueMulti.push($multiPickLabels[$i]);
		}
	}
	_log($uniqueMulti);
	var $j=0;
	for($i=0;$i<$uniqueMulti.length;$i++){
		var $actualList = [];
		var $currentMultiValues = [];
		for($j=0;$j<$multiPickValues.length;$j++){
			if($multiPickLabels[$j] == $uniqueMulti[$i]){
					$currentMultiValues.push($multiPickValues[$j]);
				
			}
		
	}
		_log($currentMultiValues);
		_setStrictVisibilityCheck(true);
		var $collect = _collect("_listItem", "/.*/", _in(_list("/selected-list/",_near(_div("/"+$uniqueMulti[$i]+"/")))));
		var $p = 0;var $actualList = [];
		for($p=0;$p<$collect.length;$p++){
			$actualList.push(_getText($collect[$p]));
		}
		_log("Expected values for "+$uniqueMulti[$i]+" "+$currentMultiValues);
		_log("Actual values for "+$uniqueMulti[$i]+" "+$actualList);
		_setStrictVisibilityCheck(false);
	
		if(_areEqual($currentMultiValues,$actualList)){
			_log("Multi Picklist values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Multi Picklist values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
}
	$actualList = [];
	//Verify URL values
	if($urlLabels.length > 0){
		
		for($i=0;$i<$urlLabels.length;$i++){
			$actualList.push(_getText(_urlbox($urlLabels[$i])));
			_log("Expected date value for "+$urlLabels[$i]+":"+$urlValues[$i]);
			_log("Actual date value for"+$urlLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($urlValues,$actualList)){
			_log("URL values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("URL values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}
$actualList = [];
//Verify Telephone values
if($telephoneLabels.length > 0){
		
		for($i=0;$i<$telephoneLabels.length;$i++){
			$actualList.push(_getText(_telephonebox($telephoneLabels[$i])));
			_log("Expected value for "+$telephoneLabels[$i]+":"+$telephoneValues[$i]);
			_log("Actual value for"+$telephoneLabels[$i]+":"+$actualList[$i]);
		}
		if(_areEqual($telephoneValues,$actualList)){
			_log("Telephone values match");
			$x = true;
			$result = Boolean($result && $x);
		}
		else {
			_log("Telephone values do not match");
			$x = false;
			$result = Boolean($result && $x);
		}	
	}

_click($sfm_pg_wo.btn_saveEditWO);
_wait(2000);
_setStrictVisibilityCheck(false);
return $result;
};
this.removePrecedingZeroInDate =  function($dateValue){
	//This function removes the preceding zero in date fields
	//Author: Janaki
	var $y = $dateValue.split("/");
	var $i=0;
	for($i=0;$i<$y.length;$i++){
		$y[$i] = parseInt($y[$i],10);	
	}
	var $correctDate = $y[0]+"/"+$y[1]+"/"+$y[2];
	return $correctDate;	
};


this.calculateNow = function(){
	//Calculating current time and returns in the form of HH:MM AM/PM
	//Author: Janaki
	var $p = $current.getHours();
	var $min = $current.getMinutes();
	if($p > 12){
		if($min < 10){
			$min = "0"+$min;
		}
		else if($min >= 10){
			 $min = $current.getMinutes();
		}
		var $now = $current.getHours()-12+":"+$min+" PM";
	}
	else if($p == 12){
		if($min < 10){
			$min = "0"+$min;
		}
		else if($min >= 10){
			 $min = $current.getMinutes();
		}
		var $now = $current.getHours()+":"+$min+" PM";
	}
	else {
		if($min < 10){
			$min = "0"+$min;
		}
		if($min >= 10){
			 $min = $current.getMinutes();
		}
		if($current.getHours() == 0){
			var $now = "12" +":"+$min+" AM";
		}
		else {
			var $now = $current.getHours()+":"+$min+" AM";
		}
	}
 return $now;
};
this.getWorkDetailNumber = function(){
	//This function gets the Line number of the Work Detail record
	//Returns Work Detail Line number in the form of WL-*********
	//Note: This function assumes Line Number field is present in the page layout
	//Author : Janaki
	$sfm_act_lightningConfig.openExtEditForLatestItem();
	_wait(2000);
	_setStrictVisibilityCheck(true);
	var $wlNum = _getText(_textbox(0,_near(_label("Line Number"))));
	_click($sfm_pg_wo.btn_updateExtEdit);
	_setStrictVisibilityCheck(false);
	_log("Created Work Detail is "+$wlNum);
	return $wlNum;
};

this.getWorkDetailNumberFromWO = function() {
	//This function fetches the latest work detail number from any work order
	//Returns Work Detail Line number in the form of WL-*********
	//Author : Janaki
	_click($sfm_pg_wo.link_relatedListsTab);
	var $wDetailNum = _getText($sfm_pg_wo.link_workDetail);
	return $wDetailNum;
	
	
};
this.navigateToLatestWorkDetail = function() {
	//This function navigates to work detail (Child line items) after
	//save in a source to target process when the line number is unknown.
	//Author: Janaki
	var $x = _count("_span","/WL-/",_near(_span("Line Number")));
	_log($x);
	$x = $x-1;
	_click(_link("/WL-/",_near(_span("slds-row-number slds-text-body--small slds-text-color--weak["+$x+"]"))));
	_wait(2000);
};

};