_windowAction("resize",1920,1080);
_setSpeed(100);
// Add All Global Variables here
var $g_url = "https://test.salesforce.com/";
var $g_un = "bhupen@back17.com";// "bhupendra.s@dev.tool2.com";
var $g_pwd = "smax@123";
var $bac_un = "automationDEV@Test4Part1.com";  //pointing to DEV
var $bac_pwd = "welcome-02";
var $bac_unDev = "automationDEV@Test4Part1.com";
var $bac_pwdDev = "welcome-01";
var $bac_unBase = "orgsadmin@svmx-test4.org.test4part2";
var $bac_pwdBase = "servicemax22";
var $url = "https://test.salesforce.com";
var $sfmUsn = "sysadmin01@sfdautomation.com";
var $sfmPwd = "maxplore2";
var $bac_PRTun = "bhupendra.auto@upgrade.com"; //Most Used Customer
var $bac_PRTpwd = "servicemax@123";
var $bac_unDev = "automationDEV@Test4Part1.com";
var $bac_pwdDev = "welcome-02";

// Flag to decide whether Dev or Base

var $orgtype = "Base";

// Checklist Global Variables

var $un_checklist = "meghana.rao@servicemax.com"; // Pointing to Automation Dummy Org
var $pwd_checklist = "cloud_102";
var $url_checklist ="https://test.salesforce.com";

//SFMD Global Variables

var $sfmUsn= "svmx-sfdtest@svmx-sfdtest.org.sfdtest1";
var $sfmPwd = "servicemax1";
//var $sfmUsn = "sysadmin01@sfdautomation.com";
//var $sfmPwd = "maxplore2";

//SFMD Dev Org

//var $sfmDevUsn = "sysadmin01@sfdautomation.com";
//?var $sfmDevPwd = "maxplore2";
//var $sfmDevUsn = "sysadmin01@sfdautomation.com";
//var $sfmDevPwd = "maxplore2";

//DC Global Variables
var $dc_org="Base";
var $dc_package="17.999";
var $dc_url = "https://test.salesforce.com";
var $dc_un = "deepa@12x.com.cfg3";
var $dc_pwd = "svmx1111";
var $dc_dispatcher = "Deepa";
var $dc_dispatName = "Deepa Aut 17 Base Admin";

//==== Reference addition module START ====
//Include the salesforce js files to enable sforce API calls
init_sForce_api();
function init_sForce_api(){
//<browser>
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '/soap/ajax/41.0/connection.js';
document.head.appendChild(script);
var script1 = document.createElement('script');
script1.type = 'text/javascript';
script1.src = '/soap/ajax/41.0/apex.js';
document.head.appendChild(script1);
//</browser>
}

// Normalizing the paths to work both on MAC and Windows
var $g_normalizedUserDir = _userDataDir().replace(/\\/g, "/");

// Add the paths that need to be included and match it to the GitHub project
// path
// ===== Start of paths ====//
var $g_projectLibPath = $g_normalizedUserDir + "/scripts/Sahi_Project/svmx/project_lib";
var $g_utilitiesPath = $g_normalizedUserDir + "/scripts/Sahi_Project/svmx/utilities_lib";
// ===== End of paths ====

var $g_referancePath = $g_normalizedUserDir;

// Store the file paths retrieved in a array
var $g_includeFilesArray = [];

// Flag to prevent multiple invocations of reference files
var $global_referenceAdded = false;

// This should execute only once across all the suites
if ($global_referenceAdded === false) {

	// Add all the paths from where we need to fetch reference files
	// _log("Getting references from dir : " + $g_projectLibPath);
	recursiveGetReferenceFiles($g_includeFilesArray, $g_projectLibPath);
	// _log("Getting references from dir : " + $g_utilitiesPath);
	recursiveGetReferenceFiles($g_includeFilesArray, $g_utilitiesPath);

	for (var $i = 0; $i < $g_includeFilesArray.length; $i++) {
		try {
			_include($g_includeFilesArray[$i]);
		} catch ($e) {
			_log("Reference Exception : " + $e);
		}
		;
	}

	// Set the flag to true to prevent duplicate addition of references
	$global_referenceAdded = true;
}

// recursively traverses $filePath while adding files (with full path) ending in
// ".sah" to $includeFilesArray
function recursiveGetReferenceFiles($includeFilesArray, $filePath) {
	var fileList = getFilesAndFolders($filePath);

	if (fileList) {
		fileList.forEach(function(fileOrFolder, index) {
			fileOrFolder = $filePath + "/" + fileOrFolder;

			if (fileOrFolder.substr(fileOrFolder.length - 4) === ".sah") {
				$includeFilesArray.push(fileOrFolder);
			} else {
				recursiveGetReferenceFiles($includeFilesArray, fileOrFolder);
			}
		});
	}
}

// returns an array of files and folders for the given $filePath and .DS_Store
// files will not be included
function getFilesAndFolders($filePath) {
	try {
		var $fileList_1 = new java.io.File($filePath);
		// array of files and directory
		var $fl = $fileList_1.list();

		// remove files and folders that start with "." this is mainly to remove
		// .DS_Store files on macs
		$fl.forEach(function removeDots(element, index) {
			if (element.charAt(0) === ".") {
				$fl.splice(index, 1);
			}
		});

		return $fl;
	} catch ($e) {
		Packages.java.lang.System.out.println("FILE EXCEPTION : " + $e);
	}
}


//==== Reference addition module END ====


function onScriptError($e) {
	return onScriptErrorDefault($e);
}
function onScriptFailure($e) {
	onScriptFailureDefault($e);
}

function onScriptErrorDefault($e) {
	if ($e.isBrowserNotResponding) {
		if (!_isPhantomJS()) {
			_takeScreenShot();
			dumpWindowInfo();
		}
	}

	else {
		if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
			_takeScreenShot();
		} else {
			// _takeScreenShot(); // uncomment this if you want a full desktop
			// screenshot too.
			_lockWindow();
			_focusWindow();
			_takePageScreenShot();
			_unlockWindow();
		}
	}
	return false;
}

function onScriptFailureDefault($e) {
	if ($e.isBrowserNotResponding) {
		if (!_isPhantomJS()) {
			_takeScreenShot();
			dumpWindowInfo();
		}
	} else {
		if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
			_takeScreenShot();
		} else {
			// _takeScreenShot(); // uncomment this if you want a full desktop
			// screenshot too.
			_lockWindow();
			_focusWindow();
			_takePageScreenShot();
			_unlockWindow();
		}
	}
}

function dumpWindowInfo() {
	var s = "<pre>";
	var info = _getWindows();
	for (var i = 0; i < info.length; i++) {
		var w = info[i];
		s += "\n-------------------\nWindow " + i + ":\n-------";
		s += "\n  windowName: " + w.windowName;
		s += "\n  derivedName:" + w.derivedName;
		s += "\n  windowTitle:" + w.windowTitle;
		s += "\n  windowURL:" + w.windowURL;
		s += "\n  wasOpened:" + w.wasOpened + " (" + (w.wasOpened == 1 ? "popup window" : "base window") + ")";
		s += "\n  domain:" + w.domain;
		var initDate = new Date(parseFloat(w.initialTime));
		var lastDate = new Date(parseFloat(w.lastTime));
		var currentDate = new Date();
		s += "\n  initialTime:" + initDate.toUTCString();
		s += "\n  lastTime:" + lastDate.toUTCString();
		s += "\n  currentTime:" + currentDate.toUTCString();
		s += "\n  Last communication:" + (currentDate - lastDate) + " ms ago";
	}
	s += "</pre>";
	_sahi._log(s);
}
