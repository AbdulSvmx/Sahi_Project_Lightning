//Setting the speed to 100ms to prevent the flex related pages which set the speed to 3000ms from slowind down other scripts in case they do not reset the execution speed back to 100ms
_setSpeed(100);

//Add All Global Variables here
var $g_url = "https://test.salesforce.com/";
var $g_un = "bhupen@back17.com";// "bhupendra.s@dev.tool2.com";
var $g_pwd = "smax@123";
var $bac_unDev = "automationDEV@Test4Part1.com";
var $bac_pwdDev = "welcome-01";
var $bac_unBase = "orgsadmin@svmx-test4.org.test4part2";
var $bac_pwdBase = "servicemax1";

//_userDataDir().replace(/\\/g, "/");

//Change this path later to match git path
//"/sahi_pro/userdata/scripts/Sahi_Flex_Atuo_Scripts"
var $g_normalizedUserDir = _userDataDir().replace(/\\/g, "/");

var $g_projectLibPath = $g_normalizedUserDir + "/scripts/Sahi_Project/svmx/project_lib";
var $g_utilitiesPath = $g_normalizedUserDir + "/scripts/Sahi_Project/svmx/utilities_lib";

var $g_referancePath = $g_normalizedUserDir;
var $g_includeFilesArray = [];
var $global_referenceAdded = false;
//This will execute only once across all the suites
if ($global_referenceAdded === false) {

	// get reference files
	//_log("Getting references from dir : " + $g_projectLibPath);
	recursiveGetReferenceFiles($g_includeFilesArray, $g_projectLibPath);
	//_log("Getting references from dir : " + $g_utilitiesPath);
	recursiveGetReferenceFiles($g_includeFilesArray, $g_utilitiesPath);

	for (var $i = 0; $i < $g_includeFilesArray.length; $i++) {
		try {
			_include($g_includeFilesArray[$i]);
		} catch ($e) {
			_log("Reference Exception : " + $e);
		}
		;
	}

	//Set the flag to true to prevent duplicate addition of references
	$global_referenceAdded = true;
}

//recursively traverses $filePath while adding files (with full path) ending in
//.sah to $includeFilesArray
function recursiveGetReferenceFiles($includeFilesArray, $filePath) {
	var fileList = getFilesAndFolders($filePath);

	if (fileList) {
		fileList.forEach(function(fileOrFolder, index) {
			fileOrFolder = $filePath + "/" + fileOrFolder;

			if (fileOrFolder.substr(fileOrFolder.length - 4) === ".sah") {
				$includeFilesArray.push(fileOrFolder);
			} else {
				recursiveGetReferenceFiles($includeFilesArray, fileOrFolder);
			}
		});
	}
}

//returns an array of files and folders for the given $filePath.
//.DS_Store files will not be included
function getFilesAndFolders($filePath) {
	try {
		var $fileList_1 = new java.io.File($filePath);
		// array of files and directory
		var $fl = $fileList_1.list();

		// remove files and folders that start with "."
		// this is mainly to remove .DS_Store files on macs
		$fl.forEach(function removeDots(element, index) {
			if (element.charAt(0) === ".") {
				$fl.splice(index, 1);
			}
		});

		return $fl;
	} catch ($e) {
		Packages.java.lang.System.out.println("FILE EXCEPTION : " + $e);
	}
}

function onScriptError($e) {
	return onScriptErrorDefault($e);
}
function onScriptFailure($e) {
	onScriptFailureDefault($e);
}

function onScriptErrorDefault($e) {
	if ($e.isBrowserNotResponding) {
		if (!_isPhantomJS()) {
			_takeScreenShot();
			dumpWindowInfo();
		}
	}

	else {
		if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
			_takeScreenShot();
		} else {
			// _takeScreenShot(); // uncomment this if you want a full desktop
			// screenshot too.
			_lockWindow();
			_focusWindow();
			_takePageScreenShot();
			_unlockWindow();
		}
	}
	return false;
}

function onScriptFailureDefault($e) {
	if ($e.isBrowserNotResponding) {
		if (!_isPhantomJS()) {
			_takeScreenShot();
			dumpWindowInfo();
		}
	} else {
		if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
			_takeScreenShot();
		} else {
			// _takeScreenShot(); // uncomment this if you want a full desktop
			// screenshot too.
			_lockWindow();
			_focusWindow();
			_takePageScreenShot();
			_unlockWindow();
		}
	}
}

function dumpWindowInfo() {
	var s = "<pre>";
	var info = _getWindows();
	for (var i = 0; i < info.length; i++) {
		var w = info[i];
		s += "\n-------------------\nWindow " + i + ":\n-------";
		s += "\n  windowName: " + w.windowName;
		s += "\n  derivedName:" + w.derivedName;
		s += "\n  windowTitle:" + w.windowTitle;
		s += "\n  windowURL:" + w.windowURL;
		s += "\n  wasOpened:" + w.wasOpened + " (" + (w.wasOpened == 1 ? "popup window" : "base window") + ")";
		s += "\n  domain:" + w.domain;
		var initDate = new Date(parseFloat(w.initialTime));
		var lastDate = new Date(parseFloat(w.lastTime));
		var currentDate = new Date();
		s += "\n  initialTime:" + initDate.toUTCString();
		s += "\n  lastTime:" + lastDate.toUTCString();
		s += "\n  currentTime:" + currentDate.toUTCString();
		s += "\n  Last communication:" + (currentDate - lastDate) + " ms ago";
	}
	s += "</pre>";
	_sahi._log(s);
}
