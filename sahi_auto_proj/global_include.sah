// Normalized path that will work for both windows and unix

//_includeOnce("../svmx/references/references.js");
//Add All Global Variables here
var $g_url = "https://test.salesforce.com/";
var $g_un = "bhupendra.s@dev.tool2.com";
var $g_pwd = "smax@123";
//_userDataDir().replace(/\\/g, "/");

//Change this path later to match git path "/sahi_pro/userdata/scripts/Sahi_Flex_Atuo_Scripts"
$userDataDirFullPath = "/scripts/sahi_auto_proj/svmx/project_lib";
var $normalizedUserDir = _userDataDir().replace(/\\/g, "/")+$userDataDirFullPath;//"C:/auto/sahi_auto_proj/svmx/project_lib";

var $referancePath = $normalizedUserDir;
var $includeFilesArray = [];
var $global_referenceAdded = false;
// This will execute only once across all the suites
if ($global_referenceAdded === false) {

// get reference files
_log("Getting references from dir : " + $referancePath);
recursiveGetReferenceFiles($includeFilesArray, $referancePath);

$includeFilesArray.forEach(function includeReferences($referencePath, $index) {
_continueOnError();
try {
_includeOnce($referencePath);
} catch ($e) {
_log("Reference Exception : " + $e);
}
;

_log($index + " Reference Added " + $referencePath);
});

$global_referenceAdded = true;
}

//recursively traverses $filePath while adding files (with full path) ending in .sah to $includeFilesArray
function recursiveGetReferenceFiles($includeFilesArray, $filePath) {
var fileList = getFilesAndFolders($filePath);

if (fileList) {
fileList.forEach(function(fileOrFolder, index) {
fileOrFolder = $filePath + "/" + fileOrFolder;

if (fileOrFolder.substr(fileOrFolder.length - 4) === ".sah") {
$includeFilesArray.push(fileOrFolder);
} else {
recursiveGetReferenceFiles($includeFilesArray, fileOrFolder);
}
});
}
}

// returns an array of files and folders for the given $filePath.
// .DS_Store files will not be included
function getFilesAndFolders($filePath) {
try {
var $fileList_1 = new java.io.File($filePath);
// array of files and directory
var $fl = $fileList_1.list();

// remove files and folders that start with "."
// this is mainly to remove .DS_Store files on macs
$fl.forEach(function removeDots(element, index) {
if (element.charAt(0) === ".") {
$fl.splice(index, 1);
}
});

return $fl;
} catch ($e) {
Packages.java.lang.System.out.println("FILE EXCEPTION : " + $e);
}
}

function onScriptError($e) {
return onScriptErrorDefault($e);
}
function onScriptFailure($e) {
onScriptFailureDefault($e);
}

function onScriptErrorDefault($e) {
if ($e.isBrowserNotResponding) {
if (!_isPhantomJS()) {
_takeScreenShot();
dumpWindowInfo();
}
}

else {
if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
_takeScreenShot();
} else {
//			_takeScreenShot(); // uncomment this if you want a full desktop screenshot too.
_lockWindow();
_focusWindow();
_takePageScreenShot();
_unlockWindow();
}
}
return false;
}

function onScriptFailureDefault($e) {
if ($e.isBrowserNotResponding) {
if (!_isPhantomJS()) {
_takeScreenShot();
dumpWindowInfo();
}
} else {
if (_sahi.isAndroid() || _sahi.isWindows() || _sahi.isApplet() || _sahi.isJava()) {
_takeScreenShot();
} else {
//			_takeScreenShot(); // uncomment this if you want a full desktop screenshot too.
_lockWindow();
_focusWindow();
_takePageScreenShot();
_unlockWindow();
}
}
}

function dumpWindowInfo() {
var s = "<pre>";
var info = _getWindows();
for (var i = 0; i < info.length; i++) {
var w = info[i];
s += "\n-------------------\nWindow " + i + ":\n-------";
s += "\n  windowName: " + w.windowName;
s += "\n  derivedName:" + w.derivedName;
s += "\n  windowTitle:" + w.windowTitle;
s += "\n  windowURL:" + w.windowURL;
s += "\n  wasOpened:" + w.wasOpened + " (" + (w.wasOpened == 1 ? "popup window" : "base window") + ")";
s += "\n  domain:" + w.domain;
var initDate = new Date(parseFloat(w.initialTime));
var lastDate = new Date(parseFloat(w.lastTime));
var currentDate = new Date();
s += "\n  initialTime:" + initDate.toUTCString();
s += "\n  lastTime:" + lastDate.toUTCString();
s += "\n  currentTime:" + currentDate.toUTCString();
s += "\n  Last communication:" + (currentDate - lastDate) + " ms ago";
}
s += "</pre>";
_sahi._log(s);
}
